<%pre>

#include <exception.h>
#include <tasks.h>
#include <tools.h>
#include <users.h>
#include <recman.h>

using namespace vdrlive;

</%pre>
<%args>
  std::string param;
  std::string async;
</%args>
<%session scope="global">
bool logged_in(false);
</%session>
<%cpp>
  if (!logged_in && LiveSetup().UseAuth()) {
    cToSvConcat targetUrl = "/login.html?redirect=";
    targetUrl.appendUrlEscaped(request.getQuery());
    return reply.redirect(targetUrl.data());
  }
  std::string recording_Name;
  {
    LOCK_RECORDINGS_READ;
    const cRecording *recording = RecordingsManager::GetByHash(param, Recordings);
    if (recording == nullptr) {
      esyslog("live: ERROR in delete_recording.ecpp, no recording with id %s found", param.c_str() );
      throw HtmlError(tr("Couldn't find recording or no recordings available"));
    }
    recording_Name = cSv(recording->Name());
  }

  if (!cUser::CurrentUserHasRightTo(UR_DELRECS)) {
    esyslog("live: WARNING in delete_recording.ecpp, no permission to delete recording %s", recording_Name.c_str() );
    throw HtmlError( tr("Sorry, no permission. Please contact your administrator!") );
  }

  bool ajaxReq = !async.empty() && (parse_int<int>(async) != 0);
  std::string referrer;

  if (ajaxReq) {
    reply.setContentType( "application/xml" );
  }
  else {
    referrer = request.getHeader("Referer:");
  }

  RemoveRecordingTask task(param);
  LiveTaskManager().Execute(task);
  const char *result;
  if (task.Result()) {
    isyslog("live: INFO in delete_recording.ecpp, deleted recording with id %s name %s", param.c_str(), recording_Name.c_str() );
    result = "success";
  } else {
    esyslog("live: ERROR in delete_recording.ecpp, cannot delete recording with id %s name %s error %s", param.c_str(), recording_Name.c_str(), task.Error().c_str() );
    result = "error";
  }

  if (!ajaxReq) {
    if (!referrer.empty() && referrer.find("login") == std::string::npos) {
      return reply.redirect(referrer);
    }
</%cpp>
<b>Delete-Recording Request</b>
<hr/>
Recording: <$ recording_Name $><br/>
Result:    <$ result $><br/>
Error:     <$ !task.Error().empty() ? task.Error() : "â€”" $>
<hr/>
<%cpp>
  }
  else {
</%cpp>
<& xmlresponse.ajax name=("delete_recording") pname=("recording") value=(recording_Name) result=(task.Result()) error=(task.Error()) &>
<%cpp>
  }
</%cpp>
