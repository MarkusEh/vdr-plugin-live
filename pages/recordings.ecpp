<%pre>

#include <string>
#include <string_view>
#include <setup.h>
#include <tasks.h>
#include <tools.h>
#include <users.h>
#include <recman.h>
#include <tntconfig.h>
#include <vdr/channels.h>
#include <stringhelpers.h>
#include <livefeatures.h>

#ifdef HAVE_PCRE2
#include <StringMatch.h>
#endif
#include <vdr/videodir.h>

#define MB_PER_MINUTE 25.75 // this is just an estimate!

using namespace vdrlive;

</%pre>
<%args>
  std::string sort;
  std::string todel;
  std::string diskinfo;
  std::string filter;
  std::string deletions[];
  std::string flat;
  int history_num_back = 0;
</%args>
<%session scope="global">
  bool logged_in(false);
</%session>

<# scope="page" should be enough but does not work with tntnet 3.0 #>
<%request scope="global">
  std::string currentSort;
  std::string deleteResult;
  std::string currentFilter;
  std::string currentFlat;
</%request>

<%include>page_init.eh</%include>
<%cpp>
std::chrono::time_point<std::chrono::high_resolution_clock> timeStart = std::chrono::high_resolution_clock::now();

reply.setHeader (tnt::httpheader::cacheControl, "no-store, no-cache, max-age=0, must-revalidate, proxy-revalidate", true);
if (!logged_in && LiveSetup().UseAuth()) {
  cToSvConcat<0> targetUrl = "/login.html?redirect=";
  targetUrl.appendUrlEscaped(request.getQuery());
  return reply.redirect(targetUrl.data());
}

if (request.getMethod() != "POST") history_num_back = 0;  // we can go back in history to this page
else ++history_num_back;  // we have to go back in history to a prev page, to avoid re-send of form data

// create the "current" values of the global request parameters, based on their old values and the current arguments
// basically, this is a bad idea. Pushing "refresh" changes the sort order :( .
// Better: Urls on menue have parameters depending on the current sort option
if (! flat.empty() ) currentFlat = flat;
// sort depends on old sort, and sort parameter
currentSort = LiveSetup().GetLastSortingMode();
if (currentSort.empty() ) currentFlat == "true"?currentSort = "errorsts":currentSort = "datedesc";
if (!sort.empty()) {
  if (sort == "date")
    currentSort = (currentSort == "datedesc") ? "dateasc" : "datedesc";
  else if (sort == "datedesc" || sort == "dateasc") currentSort = sort;
  else if (sort == "name")
    currentSort = (currentSort == "nameasc") ? "namedesc" : "nameasc";
  else if (sort == "nameasc" || sort == "namedesc") currentSort = sort;
  else if (sort == "errors")
    currentSort = (currentSort == "errorsts") ? "errorsdur" : "errorsts";
  else if (sort == "errorsts" || sort == "errorsdur") currentSort = sort;
  else if (sort == "duplicates")
    currentSort = sort;
  LiveSetup().SetLastSortingMode(currentSort);
}
currentFilter = filter;

pageTitle = tr("Recordings");

deleteResult = "";
if (!todel.empty()) {
  if (!cUser::CurrentUserHasRightTo(UR_DELRECS))
    throw HtmlError( tr("Sorry, no permission. Please contact your administrator!") );
  deletions.push_back(todel);
}
for (auto it = deletions.begin(); it != deletions.end(); ++it) {
  if (cUser::CurrentUserHasRightTo(UR_DELRECS)) {
    RemoveRecordingTask task(*it);
    LiveTaskManager().Execute(task);
/*
    if (!task.Result())
    deleteResult += std::string() + tr("ERROR:") + " " + task.Error() + "<br/>";
    else
*/
    if (task.Result()) {
      cToSvConcat delRec(tr("Deleted recording:"), " ");
      delRec.appendReplace(task.RecName(), "~", "/");
      delRec << "<br/>";
      deleteResult += std::string(delRec);
    }
  }
  else {
    throw HtmlError( tr("Sorry, no permission. Please contact your administrator!") );
  }
}
deletions.clear();

int FreeMB, UsedMB;
int Percent = cVideoDirectory::VideoDiskSpace(&FreeMB, &UsedMB);
int Minutes = int(double(FreeMB) / MB_PER_MINUTE);
int Hours = Minutes / 60;
Minutes %= 60;
diskinfo = cString::sprintf("%s %d%%  -  %2d:%02d %s", trVDR("Disk"), Percent, Hours, Minutes, trVDR("free"));

RecordingsTreePtr recordingsTree(LiveRecordingsManager()->GetRecordingsTree());

// get data for all open nodes
std::vector<int> available_recs;
std::string openTreeNodes;
if (request.hasCookie("VDR-Live-Recordings-Tree-Open-Nodes")) {
  openTreeNodes = request.getCookie("VDR-Live-Recordings-Tree-Open-Nodes");
//  isyslog("live: VDR-Live-Recordings-Tree-Open-Nodes = %s", openTreeNodes.c_str());
}
cToSvConcat<0> recording_item;
recording_item.reserve(25000);

#if TNTVERSION >= 30000
const char *TNT_ARRAY = "[]";
#else
const char *TNT_ARRAY = "";
#endif

</%cpp>
<& pageelems.doc_type &>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>VDR-Live - <$ pageTitle $></title>
    <& pageelems.stylesheets &>
    <& pageelems.create_html_js &>
    <& pageelems.ajax_js &>
<script>
const recordings_tree_creation = <$ cToSvInt(recordingsTree->getCreationTimestamp() ) $>;
const recs = [];
const rec_ids = Object.create(null)
rec_ids["T"] = [1, 2]

// Title is the title of the action (like "play in media player"), and will be html encoded here
function RecordingActionS(s, id, A, Img, Title) {
  s.a += '<a href=\"'
  s.a += A
  s.a += 'recording_'
  s.a += id
  s.a += '&sort=<$currentSort$>&filter=<$currentFilter$>&flat=<$currentFlat$>&history_num_back=<$history_num_back+1$>\" title=\"'
  addEncodeHtml(s, Title)
  s.a += '\"><img class=\"icon\" src=\"<$LiveSetup().GetThemedLinkPrefixImg()$>'
  s.a += Img
  s.a += '\" /></a>'
}
function RecordingActionPlaylist(s, id) {
  s.a += '<a class=\"hidden-xs\" href=\"playlist.m3u?recid=recording_'
  s.a += id
  s.a += '&sort=<$currentSort$>&filter=<$currentFilter$>&flat=<$currentFlat$>&history_num_back=<$history_num_back+1$>\" title=\"<$tr("Stream this recording into media player.")$>\" download><img class=\"icon hidden-xs\" src=\"<$LiveSetup().GetThemedLinkPrefixImg()$>playlist.png\" /></a>'
}

// do not html encode title! will be html encoded here
function addEventRec_r(s, eventid, title, folder, shortText, description) {
  var http_params = '&sort=<$ sort $>&filter='
  http_params += encodeURIComponent('<$ filter $>')
  http_params += '&flat=<$ flat $>&history_num_back=<$ history_num_back+1 $>'
  addEventRec(s, 'recording_', eventid, http_params, title, folder, shortText, description)
}
</script>
<script type="text/javascript" src="js.html"></script>

  <script type="text/javascript" src="js/live/treeview.js"></script>
  <script>
  const tv = new Treeview("<$ LiveSetup().GetThemedLinkPrefixImg()$>minus.png", "<$ LiveSetup().GetThemedLinkPrefixImg()$>plus.png", "<$ LiveSetup().GetThemedLinkPrefixImg()$>folder_open.png", "<$ LiveSetup().GetThemedLinkPrefixImg()$>folder_closed.png");
  </script>
</head>
<body onload="adjustHeader()" onresize="adjustHeader()" onpageshow="clearCheckboxes(document.getElementById('form_recordings'))">
  <& pageelems.logo &>
<%cpp>
const char *active_r;
if (flat == "true") active_r = "recordings_flat";
else active_r = "recordings";

if (!deleteResult.empty()) {
</%cpp>
  <& menu active=(active_r) component="recordings.delete_error" filter=(filter) &>
<%cpp>
} else {
</%cpp>
  <& menu active=(active_r) component="recordings.sort_options" filter=(filter) &>
<%cpp>
}
</%cpp>
  <div class="inhalt">
    <div class="boxheader"><div><div><$ std::string(tr("List of recordings")) + " (" + diskinfo + ")" $></div></div></div>
<%cpp>
    int rec_cnt;
    {
      LOCK_RECORDINGS_READ;
      rec_cnt = Recordings->Count();  // Access VDRs global cRecordings Recordings instance.
    }
    if (rec_cnt == 0) {
</%cpp>
      <$ tr("No recordings found") $>
<%cpp>
    } else {
      uintptr_t irecording_item = (uintptr_t)&recording_item;
      RecordingsItemDirPtr recItemRoot = recordingsTree->getRoot();
      uintptr_t iRecItemRoot = (uintptr_t)&recItemRoot;
      uintptr_t iRecordingsTree = (uintptr_t)&recordingsTree;
      uintptr_t iOpenTreeNodes = (uintptr_t)&openTreeNodes;
      uintptr_t iAvailable_recs = (uintptr_t)&available_recs;
</%cpp>
      <form method="post" name="recordings" id="form_recordings" action="recordings.ecpp">
        <div class="recordings">
          <ul class="recordingslist" style="display: block;">
            <& recordings.recordings_item iRecItem=(iRecItemRoot) irecording_item=(irecording_item) iRecordingsTree=(iRecordingsTree) iOpenTreeNodes=(iOpenTreeNodes) iAvailable_recs=(iAvailable_recs) &>
          </ul>
        </div>
        <input type="hidden" name="sort" value="<$ currentSort $>">
        <input type="hidden" name="filter" value="<$ currentFilter $>">
        <input type="hidden" name="flat" value="<$ currentFlat $>">
        <input type="hidden" name="history_num_back" value="<$ history_num_back $>">
        <div class="withmargin hidden-xs">
          <button class="red" type="submit"><$ tr("Delete selected") $></button>
<#        <button class="green" type="button" onclick="clearCheckboxes(document.getElementById('form_recordings'))" ><$ tr("Uncheck all checkboxes") $></button> #>
        </div>
      </form>
<%cpp>
    }
std::chrono::duration<double> timeNeeded = std::chrono::high_resolution_clock::now() - timeStart;
dsyslog("live, time recordings.ecpp: %f", timeNeeded.count());
</%cpp>
  </div>
</body>
</html>
<%include>page_exit.eh</%include>

<# ---------------------------------------------------------------------- #>

<%def recordings_item>
<%args>
  uintptr_t iRecItem = 0;
  uintptr_t irecording_item = 0;
  uintptr_t iRecordingsTree = 0;
  uintptr_t iOpenTreeNodes = 0;
  uintptr_t iAvailable_recs = 0;
  std::string parentIdHash;
</%args>
<%cpp>
// define sort order, and reverse (for recordings)
// use current sort order and selected sort option for that
bool reverse = false;
eSortOrder sortOrder = eSortOrder::name; // default
if (currentSort.compare(0, 4,  "date"  , 4) == 0) sortOrder = eSortOrder::date;
if (currentSort.compare(0, 6,  "errors", 6) == 0) sortOrder = eSortOrder::errors;
if (currentSort.compare(0, 8,  "errorsdur", 8) == 0) sortOrder = eSortOrder::durationDeviation;
if (currentSort.compare(0, 10, "duplicates", 10) == 0) sortOrder = eSortOrder::duplicatesLanguage;
if (currentSort == "datedesc" || currentSort == "namedesc") reverse = true;
// get rec item of this (current) dir
RecordingsItemDirPtr recItemThisDir = *(static_cast<RecordingsItemDirPtr *>((void *)iRecItem) );
RecordingsTreePtr recordingsTree = *(static_cast<RecordingsTreePtr *>((void *)iRecordingsTree) );
cToSvConcat<0> *recording_item = static_cast<cToSvConcat<0> *>((void *)irecording_item );
std::string openTreeNodes= *(static_cast<std::string *>((void *)iOpenTreeNodes) );
std::vector<int> available_recs = *(static_cast<std::vector<int> *>((void *)iAvailable_recs) );
int level = recItemThisDir->Level();


std::vector<RecordingsItemRecPtr> recItems;
const std::vector<RecordingsItemRecPtr> *recItemsC = NULL;

// data for dirs, and loop over dirs
const std::vector<RecordingsItemDirPtr> *dirItems = recItemThisDir->getDirs();
std::vector<RecordingsItemDirPtr>::const_iterator dirIterS, dirIterE, dirIter;
int direction; // for dirs
if (currentFlat != "true") {
  if (currentSort != "duplicates") {
// list of subdirs
    if (!recItemThisDir->dirEntriesSorted() && currentSort == "namedesc") {
// reverse loop over subdirs
      dirIterS = dirItems->end();
      dirIterE = dirItems->begin();
      direction = 0;
    } else {
// forward loop over subdirs
      dirIterS = dirItems->begin();
      dirIterE = dirItems->end();
      direction = 1;
    }
    for (dirIter = dirIterS; dirIter != dirIterE; std::advance(dirIter, direction) ) {
      if(direction == 0) dirIter--;
// this is the loop over the subdirs
// each subdir is a node, which can be expanded (or not)
// each subdir has an identifier in <ul> tag: fldr_<$ idHash $>
      RecordingsItemDirPtr recItem = *dirIter;

      if (!recItem->matchesFilter(currentFilter)) continue;
      /* search trough directory for new recordings */
      bool newR = false;
      if ( LiveSetup().GetMarkNewRec() ) newR = recItem->checkNew();
// calculate idHash: uniquely defines this node
      cToSvXxHash32 idHash(cToSvConcat(parentIdHash, recItem->Name()));
      iRecItem = (uintptr_t)&recItem;
  </%cpp>
      <li class="recording">
        <div class="recording_item" onclick = "tv.Toggle(this, 'fldr_<$ idHash $>')">
        <table><tr>
          <%cpp> if(level > 0) { </%cpp>
            <td class = "space">
              <img src="img/transparent.png" width="<$ 16*level $>px" height="16px" />
            </td>
          <%cpp> } </%cpp>
          <td class="space">
            <img class="recording_expander" src="<$ LiveSetup().GetThemedLinkPrefixImg()$>plus.png" />
          </td><td class="space">
            <img class="recording_folder" src="<$ LiveSetup().GetThemedLinkPrefixImg()$>folder_closed.png" />
          </td>
%         if (!recItem->scraperImage().path.empty() ) {
            <td class = space>
              <div class="thumb">
                <img data-src="/tvscraper/<$ recItem->scraperImage().path $>"
                  class="<$ recItem->scraperImage().width > recItem->scraperImage().height?"thumb":"thumbpt" $>"
                />
              </div>
            </td>
%         }
        <td class="recording_folder_name<$ (newR ? "_new" : "") $>">
          <$ recItem->Name() $>
        </td></tr></table>
        </div>
        <ul id="fldr_<$ idHash $>" class="recordingslist" style="display: none;">
          <& recordings.recordings_item iRecItem=(iRecItem) irecording_item=(irecording_item) parentIdHash=(idHash) iRecordingsTree=(iRecordingsTree) iOpenTreeNodes=(iOpenTreeNodes) iAvailable_recs=(iAvailable_recs) &>
        </ul>
      </li>
      <%cpp>
    } // end of loop over subdirs
// now the items
    recItemsC = recItemThisDir->getRecordings(sortOrder);
    if (recItemThisDir->recEntriesSorted() ) reverse = false;
  } // end if (currentSort != "duplicates")
} else {
// here we prepare the items in case of a flat list, no folders
  if (currentSort != "duplicates") {
    recItems.clear();
    size_t max_items = 100;
    if (reverse) {
      reverse = false;
      std::vector<RecordingsItemRecPtr>::const_iterator recIterFirst = recordingsTree->allRecordings(sortOrder)->begin();
      std::vector<RecordingsItemRecPtr>::const_iterator recIterLast  = recordingsTree->allRecordings(sortOrder)->end();
      for (; recIterFirst != recIterLast;) {
        --recIterLast;
        RecordingsItemRecPtr recItem = *recIterLast;
        if (!recItem->matchesFilter(currentFilter)) continue;
        recItems.push_back(recItem);
        if (recItems.size() >= max_items) break;
      }
     } else {
      for (const RecordingsItemRecPtr &rPtr: *recordingsTree->allRecordings(sortOrder) ) {
        if (!rPtr->matchesFilter(currentFilter)) continue;
        recItems.push_back(rPtr);
        if (recItems.size() >= max_items) break;
      }
    }
//    recItemsC = recordingsTree->allRecordings(sortOrder);
    recItemsC = &recItems;
  } else {
    recItems.clear();
    addDuplicateRecordingsSd(recItems, recordingsTree);
    addDuplicateRecordingsLang(recItems, recordingsTree);
    addDuplicateRecordingsNoSd(recItems, recordingsTree);
    recItemsC = &recItems;
  }
}
// do we have to get/write the recording details?
// we have to, if currentFlat == true || level == 0 || this folder is open (cookie)
bool write_recs = level == 0 || currentFlat == "true";
if (!write_recs && recItemsC) {
// check: is this folder open (cookie)?
  auto equal_fldf = [parentIdHash](cSv f) { return f.length() > 5 && f.compare(5, std::string_view::npos, parentIdHash) == 0; };
  cSplit splitOpenTreeNodes(openTreeNodes, ',', eSplitDelimBeginEnd::optional);
  write_recs = std::find_if(splitOpenTreeNodes.begin(), splitOpenTreeNodes.end(), equal_fldf) != splitOpenTreeNodes.end();
}
if (write_recs && recItemsC) {
// in case of duplicates, and not flat, the recItemsC is not available
  </%cpp>
<script>
  <%cpp>
  std::chrono::time_point<std::chrono::high_resolution_clock> timeStart_recs = std::chrono::high_resolution_clock::now();
  for (const RecordingsItemRecPtr &rPtr: *recItemsC) {
    recording_item->clear();
    rPtr->AppendAsJSArray(*recording_item);
  </%cpp>
recs[<$cSv(cToSvInt(rPtr->IdI()))$>]=[<$$ recording_item->c_str() $>]
  <%cpp>
  }
  std::chrono::duration<double> timeNeeded_recs = std::chrono::high_resolution_clock::now() - timeStart_recs;
  dsyslog("live, time recordings.ecpp recs lv 0: %f", timeNeeded_recs.count());
  </%cpp>

</script>
  <%cpp>
}
if (currentSort != "duplicates" || currentFlat == "true") {
  if (recItemsC->empty() ) { </%cpp>
    <script>
      rec_ids["fldr_<$ parentIdHash $>"] = []
    </script>
  <%cpp> } else {
    bool first = true;
//    const char *displayFolder = currentFlat == "true"?"1":"0";
    const char *displayFolder = "1";
    recording_item->clear();
    RecordingsItemRec::AppendAsJSArray(*recording_item, recItemsC->begin(), recItemsC->end(), first, currentFilter, reverse);
    </%cpp>
      <script>
%   if (level == 0) {
      document.write(rec_string_d([<$level$>, <$displayFolder$>, [ <$$ recording_item->c_str() $> ]]))
%   } else {
      rec_ids["fldr_<$ parentIdHash $>"] = [<$level$>, <$displayFolder$>, [ <$$ recording_item->c_str() $> ]]
%   }
      </script>
    <%cpp>
  }
} else {
// duplicates
  for (int i = 0; i < 3; i++) {
    recItems.clear();
    std::string nodeName;
    if (i == 0) {
      addDuplicateRecordingsSd(recItems, recordingsTree);
      nodeName = tr("Duplicates identified by tvscraper");
    } else if (i == 1) {
      addDuplicateRecordingsLang(recItems, recordingsTree);
      nodeName = tr("Duplicates, with different languages");
    } else if (i == 2) {
      addDuplicateRecordingsNoSd(recItems, recordingsTree);
      nodeName = tr("Duplicates not identified by tvscraper");
    }
    if (!recItems.empty() ) {
      cToSvXxHash32 idHash(nodeName);
// do we have to get/write the recording details?
// check: is this folder open (cookie)?
      cSv idHash_sv = idHash;
      auto equal_fldf = [idHash_sv](cSv f) { return f.length() > 5 && f.compare(5, std::string_view::npos, idHash_sv) == 0; };
      cSplit splitOpenTreeNodes(openTreeNodes, ',', eSplitDelimBeginEnd::optional);
      if (std::find_if(splitOpenTreeNodes.begin(), splitOpenTreeNodes.end(), equal_fldf) != splitOpenTreeNodes.end()) {
        </%cpp>
<script>
        <%cpp>
        for (const RecordingsItemRecPtr &rPtr: recItems) {
          recording_item->clear();
          rPtr->AppendAsJSArray(*recording_item);
          </%cpp>
recs[<$cSv(cToSvInt(rPtr->IdI()))$>]=[<$$ recording_item->c_str() $>]
%       }
</script>
      <%cpp>
      }
      bool first = true;
      recording_item->clear();
      RecordingsItemRec::AppendAsJSArray(*recording_item, recItems.begin(), recItems.end(), first, currentFilter, false);
      </%cpp>
      <li class="recording">
        <div class="recording_item" onclick = "tv.Toggle(this, 'fldr_<$ idHash $>')">
          <table><tr><td class="space">
            <img class="recording_expander" src="<$ LiveSetup().GetThemedLinkPrefixImg()$>plus.png" />
          </td><td class="space">
            <img class="recording_folder" src="<$ LiveSetup().GetThemedLinkPrefixImg()$>folder_closed.png" />
          </td><td class="recording_folder_name">
            <$ nodeName $>
          </td></tr></table>
        </div>
        <ul id="fldr_<$ idHash $>" class="recordingslist" style="display: none;">
          <script>
            rec_ids["fldr_<$ idHash $>"] = [1, 1, [ <$$ recording_item->c_str() $> ]]
          </script>
        </ul>
      </li>
      <%cpp>
    }
  }
}
</%cpp>
</%def>

<# ---------------------------------------------------------------------- #>
<%def sort_options>
<%cpp> { </%cpp>
<span class="label bold"><$ tr("Sort:") $> </span>
<a href="recordings.html?sort=<$ (currentSort == "nameasc") ? "namedesc" : "nameasc"$>&filter=<? !currentFilter.empty() ? currentFilter ?>&flat=<$currentFlat$>" <& setactive current="name" &> ><$ tr("Name") $></a>
<span class="sep">|</span>
<a href="recordings.html?sort=<$ (currentSort == "datedesc") ? "dateasc" : "datedesc"$>&filter=<? !currentFilter.empty() ? currentFilter ?>&flat=<$currentFlat$>" <& setactive current="date" &> ><$ tr("Date") $></a>
<span class="sep">|</span>
<a href="recordings.html?sort=duplicates&filter=<? !currentFilter.empty() ? currentFilter ?>&flat=<$currentFlat$>" <& setactive current="duplicates" &> ><$ tr("Duplicates") $></a>
<%cpp>
#if VDRVERSNUM >= 20505
</%cpp>
<span class="sep">|</span>
<a href="recordings.html?sort=<$ (currentSort == "errorsts") ? "errorsdur" : "errorsts" $>&filter=<? !currentFilter.empty() ? currentFilter ?>&flat=<$currentFlat$>" <& setactive current="errors" &>><$ tr("Errors") $></a>
<%cpp>
#endif
#ifdef HAVE_PCRE2
</%cpp>
<span class="sep">|</span>
<span class="label bold"><$ tr("Filter") $>:&nbsp;<input type="text" name="filter" value="<$ currentFilter $>" id="filter" onchange="filterRecordings(this, '<$ currentSort $>', '<$currentFlat$>')" />&nbsp;<& tooltip.help text=(tr("Look in recordings titles and subtitles for the given string and display only the matching ones. You may also use perl compatible regular expressions (PCRE).")) &></span>
<%cpp>
#endif
if (currentFlat != "true") {
</%cpp>
<span class="sep">|</span>
<img onclick="ExpandAll()" src="<$ LiveSetup().GetThemedLink("img", "plus.png") $>" alt="" <& tooltip.hint text=(tr("Expand all folders")) &>/>
<img onclick="CollapseAll()" src="<$ LiveSetup().GetThemedLink("img", "minus.png") $>" alt="" <& tooltip.hint text=(tr("Collapse all folders")) &>/>
<%cpp>
}
</%cpp>
<br />
<%cpp> } </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>
<%def setactive>
<%args>
std::string current;
</%args>
<%cpp>
if (currentSort.compare(0, current.length(), current) == 0) { </%cpp>class="active"<%cpp> } </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>
<%def del_rec>
<%args>
  std::string id;
  std::string sort;
  std::string filter;
  std::string flat;
  int history_num_back = 0;
</%args>
<%cpp> { </%cpp><a href="epginfo.html?epgid=del_<$ id $>&sort=<$sort$>&filter=<$filter$>&flat=<$flat$>&history_num_back=<$history_num_back+1$>" <& tooltip.hint text=(tr("Delete this recording from hard disc!")) &>><img src="<$ LiveSetup().GetThemedLink("img", "del.png") $>" alt="" /></a><%cpp> } </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>
<%def edit_rec>
<%args>
  std::string id;
  std::string sort;
  std::string filter;
  std::string flat;
  int history_num_back = 0;
</%args>
<%cpp> { </%cpp><a href="edit_recording.html?recid=<$ id $>&sort=<$sort$>&filter=<$filter$>&flat=<$flat$>&history_num_back=<$history_num_back+1$>"><img src="<$ LiveSetup().GetThemedLink("img", "edit.png") $>" alt="" <& tooltip.hint text=(tr("Edit recording")) &> /></a><%cpp> } </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>
<%def todel>
<%args>
  std::string todel;
  std::string confirmed;
  std::string history_num_back;
</%args>
<%cpp>
  RecordingsManagerPtr recordings = LiveRecordingsManager();
  const cRecording *recording = recordings->GetByMd5Hash(todel);
  if (recording == nullptr)
    throw HtmlError(tr("Couldn't find recording or no recordings available"));
  if (!cUser::CurrentUserHasRightTo(UR_DELRECS))
    throw HtmlError( tr("Sorry, no permission. Please contact your administrator!") );
  if (confirmed == "confirmed") {
    RemoveRecordingTask task(todel);
    LiveTaskManager().Execute(task);
</%cpp>
<!DOCTYPE html>
<html>
  <script>
    history.go(-<$ history_num_back $>);
  </script>
</html>
%  } else {
<div class="epg_description" id="del_<$ todel $>">
  <div class="station">
    <div class="boxheader"><div><div class="caption"><$ tr("Delete recordings") $></div></div></div>
  </div>
  <div class="epg_content">
    <form>
      <div class="about_head"><div><div><$ cSv(cToSvFormated(tr("Delete recording \"%s\"?"), recording->Name()?recording->Name():"No recording name available")) $></div></div></div>
      <input type="hidden" name="epgid" value="<$todel$>" \>
      <input type="hidden" name="delete_rec" value="confirmed" \>
      <input type="hidden" name="history_num_back" value="<$ history_num_back $>" id="history_del_<$ todel $>"\>
      <div class="about_left">
        <button id="confirm_del_<$ todel $>" class="green" type="button" onclick="delete_rec_back('<$ todel $>', <$ history_num_back $>)"><$ tr("Delete")$></button>
      </div>
      <div class="about_right">
<# if prev page is epginfo.html: just go back one page.#>
<script>
function cancel_delete() {
  if (document.referrer.indexOf("epginfo.html?") != -1) {
    history.go(-1);
  } else {
    history.go(-<$ history_num_back $>);
  }
}
</script>
        <button id="close_del_<$ todel $>" type="button" class="red" onclick="back_depending_referrer(1, <$history_num_back $>)"><$ tr("Cancel") $></button>
      </div>
    </form>
  </div>
</div>
% }
</%def>


<# ---------------------------------------------------------------------- #>
<%def rec_tools>
<%args>
  std::string id;
  std::string title;
  std::string s_IMDB_ID;
  std::string sort;
  std::string filter;
  std::string flat;
  int history_num_back = 0;
</%args>
%   if (cDevice::PrimaryDevice() && cDevice::PrimaryDevice()->HasDecoder() ) {
<& pageelems.ajax_action_href action="play_recording" param=(id) tip=(tr("play this recording")) image="play.png" alt="" &>
%   }
<& pageelems.hls_recording recId=(id) &>
<& pageelems.m3u_playlist_recording recid=(id) &>
<& pageelems.imdb_info_href title=(title) s_IMDB_ID=(s_IMDB_ID) &>
<& recordings.edit_rec id=(id) sort=(sort) filter=(filter) flat=(flat) history_num_back=(history_num_back) &>
<& recordings.del_rec id=(id) sort=(sort) filter=(filter) flat=(flat) history_num_back=(history_num_back) &>
<%cpp>
const cRecording* recording = NULL;
if (!id.empty()) recording = LiveRecordingsManager()->GetByMd5Hash(id);
if (recording && recording->Info() ) {
  int recordingErrors = -1;
#if VDRVERSNUM >= 20505
  recordingErrors = recording->Info()->Errors();
#endif
  const char *sdhd = nullptr;
  cToSvConcat frameParams;
#if VDRVERSNUM >= 20605
  StringAppendFrameParams(frameParams, recording);
  switch (recording->Info()->FrameWidth()) {
    case 720:
      sdhd = "720x576";
      break;
    case 1280:
      sdhd = "1280x720";
      break;
    case 1920:
      sdhd = "1920x1080";
      break;
    case 3840:
      sdhd = "3840x2160";
      break;
    default:
      break;
  }
#endif

  cGetScraperVideo getScraperVideo(NULL, recording);
  bool scraperDataAvailable = getScraperVideo.call(LiveSetup().GetPluginTvscraper());
  if (scraperDataAvailable) {
    int video_SD_HD = getScraperVideo.m_scraperVideo->getHD();
    if (!sdhd) sdhd = video_SD_HD == 0 ? "sd": video_SD_HD == 1 ? "hd": "ud";
    cToSvConcat<0> duration;
    if (recording->FileName() )
      AppendDuration(duration, tr("%d:%02d"), recording->LengthInSeconds() );
</%cpp>
<img data-src="img/transparent.png" height="10px" />
<span id="icons-<$id$>"></span>
<script class="injectIcons">
injectErrorHdSdIcon(\"icons-<$id$>\", <$cSv(cToSvInt(recordingErrors))$>, <$cSv(cToSvInt(getScraperVideo.m_scraperVideo->getDurationDeviation()))$>, \"<$sdhd$>\", \"<$cSv(recording->Info()->ChannelName())$>\", \"<$duration$>\", <$ GetNumberOfTsFiles(recording) $>, \"<$frameParams$>\")
</script>
<%cpp>
  }
}
</%cpp>
</%def>

<# ---------------------------------------------------------------------- #>
<%def archived_disc>
<%args>
  std::string archived;
  std::string title;
        std::string s_IMDB_ID;
</%args>
<img src="<$ LiveSetup().GetThemedLink("img", "on_dvd.png") $>" alt="on_dvd" <& tooltip.hint text=(archived) &> />
<& pageelems.imdb_info_href title=(title) s_IMDB_ID=(s_IMDB_ID)&>
</%def>

<# ---------------------------------------------------------------------- #>
<%def delete_error>
<& recordings.sort_options &>
<%cpp> { reply.out() << deleteResult; } </%cpp>
</%def>
