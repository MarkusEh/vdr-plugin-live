<%pre>

#include <setup.h>
#include <tasks.h>
#include <tools.h>
#include <users.h>
#include <recman.h>
#include <tntconfig.h>
#include <largeString.h>

#ifdef HAVE_PCRE2
#include <StringMatch.h>
#endif
#include <vdr/videodir.h>

#define MB_PER_MINUTE 25.75 // this is just an estimate!
#include <string>
std::string argList;
cLargeString recoring_item("recoring_item", 100000);
size_t max_length_recoring_item = 0;

using namespace vdrlive;

</%pre>
<%args>
	std::string sort;
	std::string todel;
	std::string diskinfo;
	std::string filter;
	std::string deletions[];
        std::string flat;
</%args>
<%session scope="global">
	bool logged_in(false);
</%session>

<# scope="page" should be enough but does not work with tntnet 3.0 #>
<%request scope="global">
	std::string currentSort;
	std::string deleteResult;
	std::string currentFilter;
	std::string currentFlat;
</%request>

<%include>page_init.eh</%include>
<%cpp>
if (!logged_in && LiveSetup().UseAuth()) return reply.redirect("login.html");

// sort depends on old sort, an sort parameter
currentSort = LiveSetup().GetLastSortingMode();
if (currentSort.empty() ) currentSort = "nameasc";
if (!sort.empty()) {
	if (sort == "date")
		currentSort = (currentSort == "dateasc") ? "datedesc" : "dateasc";
	else if (sort == "name")
		currentSort = (currentSort == "nameasc") ? "namedesc" : "nameasc";
	else if (sort == "errors")
                currentSort = (currentSort == "errorsasc") ? "errorsdesc" : "errorsasc";
	else if (sort == "duplicates")
		currentSort = sort;
	else if (sort == "tvShowsMovies")
		currentSort = sort;
	LiveSetup().SetLastSortingMode(currentSort);
}
// flat defaults from sort, but can we overwritten
if (currentSort == "errorsasc" || currentSort == "errorsdesc" || currentSort == "duplicates") currentFlat = "true";
  else currentFlat = "false";
if (! flat.empty() ) currentFlat = flat;

currentFilter = filter;

pageTitle = tr("Recordings");

deleteResult = "";
if (!todel.empty()) {
	if (!cUser::CurrentUserHasRightTo(UR_DELRECS))
		throw HtmlError( tr("Sorry, no permission. Please contact your administrator!") );
	deletions.push_back(todel);
}
#if TNTVERSION >= 30000
typedef std::vector<std::string> deletions_type;
#endif
for (deletions_type::const_iterator it = deletions.begin(); it != deletions.end(); ++it) {
	if (cUser::CurrentUserHasRightTo(UR_DELRECS)) {
		RemoveRecordingTask task(*it);
		LiveTaskManager().Execute(task);
		if (!task.Result())
			deleteResult += std::string() + tr("ERROR:") + " " + task.Error() + "<br/>";
		else
			deleteResult += std::string() + tr("Deleted recording:") + " " + StringReplace(task.RecName(), "~", "/") + "<br/>";
	}
	else {
		throw HtmlError( tr("Sorry, no permission. Please contact your administrator!") );
	}
}
deletions.clear();

int FreeMB, UsedMB;
#if APIVERSNUM > 20101
int Percent = cVideoDirectory::VideoDiskSpace(&FreeMB, &UsedMB);
#else
int Percent = VideoDiskSpace(&FreeMB, &UsedMB);
#endif
int Minutes = int(double(FreeMB) / MB_PER_MINUTE);
int Hours = Minutes / 60;
Minutes %= 60;
diskinfo = cString::sprintf("%s %d%%  -  %2d:%02d %s", trVDR("Disk"), Percent, Hours, Minutes, trVDR("free"));
#if TNTVERSION >= 30000                                                                                                                       
std::string TNT_ARRAY  = "[]";
#else                                                                                                                                         
std::string TNT_ARRAY = "";
#endif                                                                                                                                        
                                                                                                                                              
</%cpp>
<& pageelems.doc_type &>
<html>
	<head>
		<title>VDR-Live - <$ pageTitle $></title>
		<& pageelems.stylesheets &>
		<& pageelems.ajax_js &>
<script>
const rec_ids = Object.create(null)
rec_ids["T"] = [1, 2]
// rec_ids["fldr_0daccb266ca8fc495a4ca8e3ce41fc49"] = ... (ids to create list of recordings)

function RecordingActionS(s, id, A, Img, Title, argList) {
  s.a += '<a href=\"'
  s.a += A
  s.a += 'recording_'
  s.a += id
  s.a += argList
  s.a += '\" title=\"'
  s.a += Title
  s.a += '\"><img src=\"<$LiveSetup().GetThemedLinkPrefixImg()$>'
  s.a += Img
  s.a += '\" /></a>'
}

function IMDBS(s, im_db, name) {
  if (<$LiveSetup().GetShowIMDb()$> != 0) {
    if (im_db == "") {
      s.a += '<a href=\"http://www.imdb.com/find?s=all&q='
      s.a += name
    } else {
      s.a += '<a href=\"https://www.imdb.com/title/'
      s.a += im_db
    }
    s.a += 
     '\" target=\"_blank\"><img src=\"<$LiveSetup().GetThemedLinkPrefixImg()$>imdb.png\" title=\"<$tr("Find more at the Internet Movie Database.")$>\"/></a>'
  }
}
// [0] : IMDB ID
// [1] : ID (prefix "recording_" removed !!!)
// [2] : ArchiveDescr()
// [3] : image.path  (nach "/tvscraper/") 
// [4] : "pt" if m_s_image.width <= m_s_image.height, otherwise= ""
// [5] : title (scraper)
// [6] : season / episode (scraper, for tv shows, if available. Otherwise: Empty)
// [7] : runtime (scraper)
// [8] : relase date (scraper)
// [9] : recording_spec: Day, time & duration
// [10] : Number of recording errors

function RecordingsS(s, level, argList, displayFolder, data, data_src) {
  for (obj of data) {
    s.a += 
      '<li class="recording"><div class="recording_item"><div class="recording_imgs">'
    if (level > 0) s.a += 
      '<img src="img/transparent.png" width="' + String(16 * level) + 'px" height="16px" />'
    if (obj[2] != "") {
      s.a += '<img src=\"<$LiveSetup().GetThemedLinkPrefixImg()$>on_dvd.png\" alt=\"on_dvd\" title=\"'
      s.a += obj[2]
      s.a += '/>'
    } else {
      s.a += '<input type="checkbox" name="deletions<$TNT_ARRAY$>" value="recording_'
      s.a += obj[1]
      s.a += '" />'
    }
    if ("<$LiveSetup().GetTvscraperImageDir()$>" != "") {
      s.a += '</div><div class=\"thumb\"><a class=\"thumb\" href=\"epginfo.html?epgid=recording_'
      s.a += obj[1]
      if (data_src == 0) s.a += '\"><img src=\"';
      else s.a += '\"><img data-src=\"';
      if (obj[3] != "") {
        s.a += '/tvscraper/'
        s.a += obj[3]
        s.a += '\" class=\"thumb'
        s.a += obj[4]
      } else s.a += 'img/transparent.png\" height=\"16px'
      if (obj[5] != "" || obj[8] != "") {
// scraper data available
        s.a += '\" title=\"'
        s.a += obj[5]
          if (obj[6] != "") {
            s.a += '<br/>S'
            s.a += obj[6]
          }
          if (obj[7] != "") {
            s.a += '<br/>'
            s.a += obj[7]
          }
          if (obj[8] != "") {
            s.a += '<br/>'
            s.a += obj[8]
          }
      }
      s.a += '\"/> </a>'
    }
// end if (!LiveSetup().GetTvscraperImageDir().empty() )
    s.a += '</div><div class=\"recording_spec\"><div class=\"recording_day\">'
    s.a += obj[9]
    s.a += '</div>'
    if (obj[10] > -100) {
      s.a += '<div class=\"recording_errors\"><img src=\"<$LiveSetup().GetThemedLinkPrefixImg()$>'
      if (obj[10] == 0) s.a += 'NoRecordingErrors.png'
      if (obj[10]  > 0) s.a += 'RecordingErrors.png'
      if (obj[10]  < 0) s.a += 'NotCheckedForRecordingErrors.png'
      s.a += '\" width = \"16px\" title=\"'
      if (obj[10] == 0) s.a += '<$tr("No recording errors")$>'
      if (obj[10]  > 0) s.a += '<$tr("Number of recording errors:")$> ' + String(obj[10])
      if (obj[10]  < 0) s.a += '<$tr("Recording errors unknown")$>'
      s.a += '\" /> </div>'
    }
    s.a += '<div class=\"recording_sd_hd\"><img src=\"<$LiveSetup().GetThemedLinkPrefixImg()$>'
    s.a += obj[11]
    s.a += 'd.png\" width = \"25px\" title=\"'
    s.a += obj[12]
    s.a += '\" /> </div><div class=\"recording_name'
    s.a += obj[13]
    s.a += '\"><a title=\"'
    if (obj[14] != "") {
      s.a += obj[14]
      s.a += '&lt;br /&gt;'
    }
    s.a += '<$tr("Click to view details.")$>'
    s.a += '\" href=\"epginfo.html?epgid=recording_'
    s.a += obj[1]
    s.a += '\">'
    s.a += obj[15]
    if (displayFolder == 1 && obj[16] != "") {
      s.a += ' ('
      s.a += obj[16]
      s.a += ')'
    }
    s.a += '<br /><span>'
    s.a += obj[14]
    if (obj[14] == "") s.a += '&nbsp;'
    s.a += '</span></a></div></div><div class=\"recording_actions\">'
    if (obj[2] == "") {
      RecordingActionS(s, obj[1], "vdr_request/play_recording?param=", "play.png", "<$tr("play this recording")$>", argList)
      RecordingActionS(s, obj[1], "playlist.m3u?recid=", "playlist.png", "<$tr("Stream this recording into media player.")$>", argList)
      IMDBS(s, obj[0], obj[15])
      RecordingActionS(s, obj[1], "edit_recording.html?recid=", "edit.png", "<$tr("Edit recording")$>", argList)
      RecordingActionS(s, obj[1], "recordings.html?todel=", "del.png", "<$tr("Delete this recording from hard disc!")$>", argList)
    } else {
      s.a += '<img src=\"img/transparent.png\" width=\"16px\" height=\"16px\" />'
      IMDBS(s, obj[0], obj[15])
    }
    s.a += '</div>'
    if (obj[2] != "") {
      s.a += '<div class=\"recording_arch\">'
      s.a += obj[2]
      s.a += '</div>'
    }
    s.a += '</div></li>'
  }
}

function rec_string(rec_ids) {
// use img src= ...
  const st = Object.create(null)
  st.a = ""
  RecordingsS(st, rec_ids[0], rec_ids[1], rec_ids[2], rec_ids[3], 0)
  return st.a
}
function rec_string_d(rec_ids) {
// use img data-src= ...
  const st = Object.create(null)
  st.a = ""
  RecordingsS(st, rec_ids[0], rec_ids[1], rec_ids[2], rec_ids[3], 1)
  return st.a
}

</script>

<script type="text/javascript" src="treeview.js"></script>
	</head>
	<body onload="adjustHeader()" onresize="adjustHeader()">
		<& pageelems.logo &>
<%cpp>
if (!deleteResult.empty()) {
</%cpp>
		<& menu active=("recordings") component=("recordings.delete_error") &>
<%cpp>
} else {
</%cpp>
		<& menu active=("recordings") component=("recordings.sort_options") &>
<%cpp>
}
</%cpp>
		<div class="inhalt">
			<div class="boxheader"><div><div><$ std::string(tr("List of recordings")) + " (" + diskinfo + ")" $></div></div></div>
<%cpp>
#if VDRVERSNUM >= 20301
			int rec_cnt;
			{
				LOCK_RECORDINGS_READ;
				rec_cnt = Recordings->Count();  // Access VDRs global cRecordings Recordings instance.
			}
			if (rec_cnt == 0) {
#else
			if (Recordings.Count() == 0) { // Access VDRs global cRecordings Recordings instance.
#endif
</%cpp>
			<$ tr("No recordings found") $>
<%cpp>
			} else {
</%cpp>
			<form method="post" name="recordings" action="recordings.ecpp">
			<div class="recordings">
			<ul class="recordingslist" style="display: block;">
<& recordings.recordings_item filter=(currentFilter) &>
			</ul>
			</div>
			<div class="withmargin">
				<button class="red" type="submit"><$ tr("Delete selected") $></button>
			</div>
			</form>
<%cpp>
			}
</%cpp>
		</div>
	</body>
</html>
<%include>page_exit.eh</%include>

<# ---------------------------------------------------------------------- #>

<%def recordings_item>
<%args>
	filter;
	int counter = 0;
	uintptr_t iRecItem = 0;
	std::string parentIdHash;
</%args>
<%cpp>
// "
RecordingsTreePtr recordingsTree(LiveRecordingsManager()->GetRecordingsTree());
RecordingsItemPtr recItemThisDir;
if (iRecItem != 0) {
recItemThisDir = *(static_cast<RecordingsItemPtr *>((void *)iRecItem) );
} else {
recItemThisDir = recordingsTree->getRoot();
}
std::list<RecordingsItemPtr> recItems;
std::list<RecordingsItemPtr>::iterator recIter;
bool sorted = false;
int level = 0;
if( currentFlat != "true" ) {
// create list of subdirs, in "recItems"
  sorted = recItemThisDir->addSubdirs(recItems);
  if (!sorted) {
    if (currentSort == "namedesc")
      recItems.sort(RecordingsItemPtrCompare::ByDescendingNameDescSort);
    else if (currentSort == "nameasc")
      recItems.sort(RecordingsItemPtrCompare::ByAscendingNameDescSort);
  }
  for (recIter = recItems.begin(); recIter != recItems.end(); ++recIter) {
// this is the loop over the subdirs
// each subdir is a node, which can be expanded (or not)
// each subdir has an identifier in <ul> tag: fldr_<$ idHash $>
    RecordingsItemPtr recItem = *recIter;
    counter++;

    /* search trough directory for new recordings */
    bool newR = false;
    if ( LiveSetup().GetMarkNewRec() ) newR = recItem->checkNew();
    level = recItem->Level();
// calculate idHash: uniquely defines this node
    std::string combinedId = parentIdHash + recItem->Name();
    combinedId += counter; // note: this will appand one character, basic_string& operator+=( CharT ch );
    std::string idHash(xxHash32(combinedId));
    iRecItem = (uintptr_t)&recItem;
</%cpp>
    <li class="recording">
    <div class="recording_item" onclick = "Toggle2(this, 'fldr_<$ idHash $>')">
    <div class="recording_imgs">
    <{ if(level > 1) { }><img src="img/transparent.png" width="<$16*(level-1) $>px" height="16px" /> <{ } }>
    <img class="recording_expander" src="<$ LiveSetup().GetThemedLinkPrefixImg()$>plus.png" /><img class="recording_folder" src="<$ LiveSetup().GetThemedLinkPrefixImg()$>folder_closed.png" /></div>
    <{ if (!recItem->scraperImage().path.empty() ) { }>
      <div class="thumb">
      <img data-src="/tvscraper/<$ recItem->scraperImage().path $>"
           <$$ recItem->scraperImage().width > recItem->scraperImage().height?"class=\"thumb\"":"class=\"thumbpt\"" $>
      />
      </div>
     <{ } }>
    <div class="recording_spec">
      <div class="recording_folder_name<$ (newR ? "_new" : "") $>"><$ recItem->Name() $></div>
    </div>
    <div class="recording_actions">&nbsp;</div>
    </div>

          <ul id="fldr_<$ idHash $>" class="recordingslist" style="display: none;">
    <& recordings.recordings_item filter=(filter) counter=(counter) iRecItem=(iRecItem) parentIdHash=(idHash) &>
                    </ul>
            </li>
    <%cpp>
  } // end of loop over subdirs
// now the items
  recItems.clear();
  sorted = recItemThisDir->addRecordings(recItems);
  level = recItemThisDir->Level() + 1;
} else {
// here we prepare the items in case of a flat list, no folders
  if (currentSort != "duplicates") recordingsTree->addAllRecordings(recItems);
}
argList.clear();
argList.append("&sort=");
argList.append(currentSort);
argList.append("&filter=");
argList.append(currentFilter);
if (currentSort != "duplicates") {
  if (!sorted) {
    if (currentSort == "dateasc")
            recItems.sort(RecordingsItemPtrCompare::ByAscendingDate);
    else if (currentSort == "datedesc")
            recItems.sort(RecordingsItemPtrCompare::ByDescendingDate);
    else if (currentSort == "namedesc")
            recItems.sort(RecordingsItemPtrCompare::ByDescendingNameDescSort);
    else if (currentSort == "nameasc")
            recItems.sort(RecordingsItemPtrCompare::ByAscendingNameDescSort);
    else if (currentSort == "errorsasc" || currentSort == "errorsdesc")
            recItems.sort(RecordingsItemPtrCompare::ByDescendingRecordingErrors);
  }

  bool first = true;
  bool displayFolder = currentFlat == "true";
  if (recItems.empty() ) { </%cpp>
    <script>
      rec_ids["fldr_<$ parentIdHash $>"] = []
    </script>
  <%cpp> } else { </%cpp>
  <script>
    rec_ids["fldr_<$ parentIdHash $>"] = [<$level$>, "<$argList$>", <$displayFolder?1:0$>, [
    <%cpp>
    recoring_item.clear();
    RecordingsItemRec::AppendAsJSArray(recoring_item, recItems.begin(), recItems.end(), first, filter, displayFolder);
    </%cpp>
    <$$ recoring_item.c_str() $>
  ]]
  </script>
  <%cpp> }
if( currentFlat == "true" && !recItems.empty()) {
</%cpp>
<script>
document.write(rec_string_d(rec_ids["fldr_<$ parentIdHash $>"]))
</script>
<%cpp>
} } else {
// duplicates
  for (int i = 0; i < 3; i++) {
    recItems.clear();
    bool first = true;
    std::string nodeName;
    if (i == 0) {
      addDuplicateRecordingsSd(recItems, recordingsTree);
      nodeName = tr("Duplicates identified by tvscraper");
    } else if (i == 1) {
      addDuplicateRecordingsLang(recItems, recordingsTree);
      nodeName = tr("Duplicates, with different languages");
    } else if (i == 2) {
      addDuplicateRecordingsNoSd(recItems, recordingsTree);
      nodeName = tr("Duplicates not identified by tvscraper");
    }
    std::string idHash(xxHash32(nodeName));
    if (!recItems.empty() ) {
  </%cpp>
      <li class="recording">
      <div class="recording_item" onclick = "Toggle2(this, 'fldr_<$ idHash $>')">
      <script>
            rec_ids["fldr_<$ idHash $>"] = [1, "<$argList$>", 1, [
            <%cpp>
            recoring_item.clear();
            RecordingsItemRec::AppendAsJSArray(recoring_item, recItems.begin(), recItems.end(), first, filter, true);
            </%cpp>
            <$$ recoring_item.c_str() $>
          ]]
      </script>
      <div class="recording_imgs">
      <img class="recording_expander" src="<$ LiveSetup().GetThemedLinkPrefixImg()$>plus.png" /><img class="recording_folder" src="<$ LiveSetup().GetThemedLinkPrefixImg()$>folder_closed.png" /></div>
      <div class="recording_spec">
        <div class="recording_folder_name"><$ nodeName $></div>
      </div>
      <div class="recording_actions">&nbsp;</div>
      </div>
        <ul id="fldr_<$ idHash $>" class="recordingslist" style="display: none;">
<#
          <script>Recordings(1, "<$argList$>", 1, [
            <%cpp>
            recoring_item.clear();
            RecordingsItemRec::AppendAsJSArray(recoring_item, recItems.begin(), recItems.end(), first, filter, true);
            </%cpp>
            <$$ recoring_item.c_str() $>
          ])</script>
#>
        </ul>
      </li>
      <%cpp>
    }
  }
}
  </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def sort_options>
<%cpp> { </%cpp>
<span class="label bold"><$ tr("Sort:") $> </span>
<a href="recordings.html?sort=name&filter=<? currentFilter != "" ? currentFilter ?>" /><$ tr("Name") $></a>
<span class="sep">|</span>
<a href="recordings.html?sort=date&filter=<? currentFilter != "" ? currentFilter ?>" /><$ tr("Date") $></a>
<span class="sep">|</span>
<a href="recordings.html?sort=duplicates&filter=<? currentFilter != "" ? currentFilter ?>" /><$ tr("Duplicates") $></a>
<%cpp>
#if VDRVERSNUM >= 20505
</%cpp>
<span class="sep">|</span>
<a href="recordings.html?sort=errors&filter=<? currentFilter != "" ? currentFilter ?>" /><$ tr("Errors") $></a>
<%cpp>
#endif
#ifdef HAVE_PCRE2
</%cpp>
<span class="sep">|</span>
<span class="label bold"><$ tr("Filter") $>:&nbsp;<input type="text" name="filter" value="<$ currentFilter $>" id="filter" onchange="filterRecordings(this)" />&nbsp;<& tooltip.help text=(tr("Look in recordings titles and subtitles for the given string and display only the matching ones. You may also use perl compatible regular expressions (PCRE).")) &></span>
<%cpp>
#endif
</%cpp>
<span class="sep">|</span>
<img onclick="ExpandAll()" src="<$ LiveSetup().GetThemedLink("img", "plus.png") $>" alt="" <& tooltip.hint text=(tr("Expand all folders")) &>/>
<img onclick="CollapseAll()" src="<$ LiveSetup().GetThemedLink("img", "minus.png") $>" alt="" <& tooltip.hint text=(tr("Collapse all folders")) &>/>
<br />
<%cpp> } </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def del_rec>
<%args>
	std::string id;
</%args>
<%cpp> { </%cpp><a href="recordings.html?todel=<$ id $>" <& tooltip.hint text=(tr("Delete this recording from hard disc!")) &>><img src="<$ LiveSetup().GetThemedLink("img", "del.png") $>" alt="" /></a><%cpp> } </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def edit_rec>
<%args>
	std::string id;
</%args>
<%cpp> { </%cpp><a href="edit_recording.html?recid=<$ id $>"><img src="<$ LiveSetup().GetThemedLink("img", "edit.png") $>" alt="" <& tooltip.hint text=(tr("Edit recording")) &> /></a><%cpp> } </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>


<%def rec_tools>
<%args>
	std::string id;
	std::string title;
        std::string s_IMDB_ID;
</%args>
<& pageelems.ajax_action_href action="play_recording" param=(id) tip=(tr("play this recording.")) image="play.png" alt="" &>
<& pageelems.m3u_playlist_recording recid=(id) &>
<& pageelems.imdb_info_href title=(title) s_IMDB_ID=(s_IMDB_ID) &>
<& recordings.edit_rec id=(id) &>
<& recordings.del_rec id=(id) &>
</%def>

<# ---------------------------------------------------------------------- #>

<%def archived_disc>
<%args>
	std::string archived;
	std::string title;
        std::string s_IMDB_ID;
</%args>
<img src="<$ LiveSetup().GetThemedLink("img", "on_dvd.png") $>" alt="on_dvd" <& tooltip.hint text=(archived) &> />
<& pageelems.imdb_info_href title=(title) s_IMDB_ID=(s_IMDB_ID)&>
</%def>

<# ---------------------------------------------------------------------- #>

<# ---------------------------------------------------------------------- #>

<%def delete_error>
<& recordings.sort_options &>
<%cpp> { reply.out() << deleteResult; } </%cpp>
</%def>
