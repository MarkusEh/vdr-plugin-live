<%pre>
#include "../services.h"

#include <livefeatures.h>
#include <setup.h>
#include <timers.h>
#include <tools.h>
#include <epg_events.h>
#include <gen_version_suffix.h>
#include <tntfeatures.h>

using namespace vdrlive;

std::string toString(const std::vector<std::string> &vec) {
  if (vec.size() == 0) return "";
  std::string result;
  for (const std::string &str:vec) {
    if (!result.empty() ) result.append(", ");
    result.append(str);
  }
  return result;
}
  
std::string toString(const std::vector<int> &vec) {
  if (vec.size() == 0) return "";
  std::string result;
  for (const int &i:vec) {
    if (!result.empty() ) result.append(", ");
    result.append(std::to_string(i) );
  }
  return result;
}
  
std::string toString(const std::vector<cActor> &vec) {
  if (vec.size() == 0) return "";
  std::string result;
  for (const cActor &actor:vec) {
    if (!result.empty() ) result.append(", ");
    result.append(actor.name);
    if (!actor.role.empty() ) {
      result.append(" as ");
      result.append(actor.role);
    }
  }
  return result;
}
  
</%pre>
<%session scope="global">
int update_status(1);
</%session>

<# ---------------------------------------------------------------------- #>

<%def doc_type>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
</%def>

<# ---------------------------------------------------------------------- #>

<%def stylesheets>
<link rel="stylesheet" type="text/css" href="styles.css"/>
<link rel="stylesheet" type="text/css" href="<$ LiveSetup().GetThemedLink("css", "theme.css") $>"/>
<link rel="stylesheet" type="text/css" href="css/siteprefs.css"/>
<link rel="stylesheet" type="text/css" href="css/DatePicker.css"/>
<script type="text/javascript" src="js/live/header.js"></script>
<script type="text/javascript">
function classSetValue(element_id, value) {
  if (document && document.getElementById(element_id) ) {
    document.getElementById(element_id).setAttribute("class", value);
  }
}
function removeAttributeHidden(element_id) {
  if (document && document.getElementById(element_id) ) {
    document.getElementById(element_id).removeAttribute("hidden");
    classSetValue(element_id + "_m", "active");
  }
}
function addAttributeHidden(element_id) {
  if (document && document.getElementById(element_id) ) {
    document.getElementById(element_id).hidden = true;
    classSetValue(element_id + "_m", "inactive");
  }
}
function displayOnOff(element_id_on, element_id_off) {
 removeAttributeHidden(element_id_on);
 addAttributeHidden(element_id_off);
} 
function displayOn2Off(element_id_on, element_id_off1, element_id_off2) {
 removeAttributeHidden(element_id_on);
 addAttributeHidden(element_id_off1);
 addAttributeHidden(element_id_off2);
} 
function displayOn3Off(element_id_on, element_id_off1, element_id_off2, element_id_off3) {
 removeAttributeHidden(element_id_on);
 addAttributeHidden(element_id_off1);
 addAttributeHidden(element_id_off2);
 addAttributeHidden(element_id_off3);
} 
function displayEPG(boxId) {
  displayOn3Off(boxId + "_epg", boxId + "_scraper", boxId + "_actors", boxId + "_artwork");
  removeAttributeHidden(boxId + "_epg_image");
}
function displayScraper(boxId) {
  displayOn3Off(boxId + "_scraper", boxId + "_epg", boxId + "_actors", boxId + "_artwork");
  removeAttributeHidden(boxId + "_epg_image");
}
function displayActors(boxId) {
  displayOn3Off(boxId + "_actors", boxId + "_epg", boxId + "_scraper", boxId + "_artwork");
  addAttributeHidden(boxId + "_epg_image");
}
function displayArtwork(boxId) {
  displayOn3Off(boxId + "_artwork", boxId + "_actors", boxId + "_epg", boxId + "_scraper");
  addAttributeHidden(boxId + "_epg_image");
}
</script>
</%def>

<# ---------------------------------------------------------------------- #>

<%def logo>
<!-- start of fixed page header -->
<div id="header" style="width: 100%; background-color: inherit">
<div id="padding" style="display: none"></div>
<div id="content">
<!-- header content follows -->
<%cpp>
	if (LiveSetup().GetShowLogo()
		|| (LiveSetup().GetUseAjax() && LiveSetup().GetShowInfoBox())) {
</%cpp>
<div class="page_header">
<%cpp>
		if (LiveSetup().GetShowLogo()) {
</%cpp>
<a href="<$ LiveSetup().GetStartScreenLink()$>">
<img src="<$ LiveSetup().GetThemedLink("img", "logo.png") $>" alt="VDR Live!" class="logo"></img></a>
<%cpp>
		}
</%cpp>
<%cpp>if (LiveSetup().GetUseAjax() && LiveSetup().GetShowInfoBox()) { </%cpp><& infobox &><%cpp> } </%cpp>
</div>
<div style="clear: both"></div>
<%cpp>
	}
</%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def hide_element>
<%args>
	int hide = 1;
</%args>
<%cpp> if (hide) { </%cpp>style="visibility: hidden"<%cpp> } </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def progressbar>
<%args>
	int progress = 0;
	std::string id;
	int duration = -1; // invalid duration as default
</%args>
<%cpp>
	std::string cls("__progress");
	if ((duration >= 0) && ((progress < 0) || (duration == 0)))
		cls +="_invisible";
</%cpp>
<div class="<$ cls $>"><div class="__elapsed" <%cpp> if (!id.empty()) { </%cpp>id="<$ id $>"<%cpp> } </%cpp>style="width: <$ progress $>px"></div></div>
</%def>

<# ---------------------------------------------------------------------- #>

<%def ajax_action_href>
<%args>
	std::string action;
	std::string tip;
	std::string param;
	std::string image;
	std::string alt;
	std::string id;
</%args>
<%cpp> { </%cpp><a <%cpp> if (!id.empty()) { </%cpp>id="<$ id $>" <%cpp> } </%cpp><& hide_element hide=(id.empty()? 0 : 1) &> href="vdr_request/<$ action $>?param=<$ param $>" <%cpp>if (!tip.empty()) { </%cpp><& tooltip.hint text=(tip) &> <%cpp> } </%cpp>><img src="<$ LiveSetup().GetThemedLink("img", image) $>" alt="<$ alt $>"></img></a> <%cpp> } </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def imdb_info_href>
<%args>
	std::string title;
	std::string s_IMDB_ID;
</%args>
<%cpp>
// if (LiveSetup().GetShowIMDb())
{
if (s_IMDB_ID.empty() ) { </%cpp>
<a href="http://www.imdb.com/find?s=all&q=<$ StringUrlEncode(title) $>"
<%cpp> } else { </%cpp>
<a href="http://www.imdb.com/title/<$ s_IMDB_ID $>"
<%cpp> } </%cpp>
 target="_blank"><img src="<$ LiveSetup().GetThemedLink("img", "imdb.png") $>" alt="" <& tooltip.hint text=(tr("Find more at the Internet Movie Database.")) &>></img></a> <%cpp> } </%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def hls_channel>
<%args>
	std::string channelId;
</%args>
<%cpp>
if (LiveSetup().GetUseStreamdev() && LiveFeatures<features::streamdev_server>().Loaded()) {
</%cpp>
<a href="stream.html?channelid_str=<$ channelId $>"><img src="<$ LiveSetup().GetThemedLink("img", "stream_button.png") $>" alt="" <& tooltip.hint text=(tr("Stream this channel into browser.")) &>></img></a>
<%cpp>
}
</%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def m3u_playlist_channel>
<%args>
	std::string channelId;
</%args>
<%cpp>
if (LiveSetup().GetUseStreamdev() && LiveFeatures<features::streamdev_server>().Loaded()) {
#if TNTVERSION >= 30000
</%cpp>
<a href="playlist.m3u?channel_str=<$ channelId $>"><img src="<$ LiveSetup().GetThemedLink("img", "playlist.png") $>" alt="" <& tooltip.hint text=(tr("Stream this channel into media player.")) &>></img></a>
<%cpp>
#else
</%cpp>
<a href="playlist.m3u?channel=<$ channelId $>"><img src="<$ LiveSetup().GetThemedLink("img", "playlist.png") $>" alt="" <& tooltip.hint text=(tr("Stream this channel into media player.")) &>></img></a>
<%cpp>
#endif
}
</%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def m3u_playlist_recording>
<%args>
	std::string recid;
	std::string linkText;
</%args>
<%cpp>
#if TNT_WATCHDOG_SILENCE
{
</%cpp><a href="playlist.m3u?recid=<$ recid $>"><img src="<$ LiveSetup().GetThemedLink("img", "playlist.png") $>" alt="" <& tooltip.hint text=(tr("Stream this recording into media player.")) &>></img> <$ linkText $></a>
<%cpp>
}
#endif
</%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def event_timer>
<%args>
	std::string epgid;
</%args>
<%cpp>
	tChannelID channelid;
	tEventID eventid;
	EpgEvents::DecodeDomId(epgid, channelid, eventid);
	const cTimer* timer = LiveTimerManager().GetTimer(eventid, channelid);
	if (timer) {
</%cpp>
		<& pageelems.edit_timer timerId=(LiveTimerManager().GetTimers().GetTimerId(*timer)) imgName=("record_timer.png") &>
<%cpp>
	}
	else {
</%cpp>
		<a href="edit_timer.html?epgid=<$ epgid $>"><img src="<$ LiveSetup().GetThemedLink("img", "record.png") $>" alt="" <& tooltip.hint text=(tr("Record this")) &> /></a>
<%cpp>
	}
</%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def edit_timer>
<%args>
	std::string timerId;
	std::string imgName = "edit.png";
</%args>
	<a href="edit_timer.html?timerid=<$ SortedTimers::EncodeDomId(timerId) $>"><img src="<$ LiveSetup().GetThemedLink("img", imgName) $>" alt="" <& tooltip.hint text=(tr("Edit timer")) &> /></a>
</%def>


<# ---------------------------------------------------------------------- #>

<%def ajax_js>
<%cpp>
	if (LiveSetup().GetUseAjax()) {
</%cpp>
	<script type="text/javascript" src="js/mootools/mootools.v1.11.js"></script>
	<script type="text/javascript" src="js/mootools/DatePicker.js"></script>
	<script type="text/javascript" src="js/live/liveajax.js"></script>
	<script type="text/javascript" src="js/live/infowin.js"></script>
	<script type="text/javascript" src="js/live/hinttips.js"></script>
	<script type="text/javascript" src="js/live/browserwin.js"></script>
	<script type="text/javascript" src="js/live/pageenhance.js"></script>
	<script type="text/javascript"><!--
		var liveEnhanced = new PageEnhance({
				infoWinOptions: {
					buttonimg: 'img/transparent.png',
					loadingMsg: '<$ tr("loading data") $>',
					errorMsg: '<$ tr("an error occured!") $>'
				},
				notifyStrings: {
					successMsg: '<img src="<$ LiveSetup().GetThemedLink("img", "active.png") $>" alt=""> <$ tr("Request succeeded!") $>',
					errorMsg: '<img src="<$ LiveSetup().GetThemedLink("img", "del.png") $>" alt=""> <$ tr("Request failed!") $>'
				},
				datePickerOptions: '{ dayChars:2, dayNames: ["<$ tr("Sunday") $>", "<$ tr("Monday") $>", "<$ tr("Tuesday") $>","<$ tr("Wednesday") $>","<$ tr("Thursday") $>","<$ tr("Friday") $>","<$ tr("Saturday") $>"], format:"<$ tr("mm/dd/yyyy") $>", monthNames: ["<$ tr("January") $>","<$ tr("February") $>","<$ tr("March") $>","<$ tr("April") $>","<$ tr("May") $>","<$ tr("June") $>","<$ tr("July") $>","<$ tr("August") $>","<$ tr("September") $>","<$ tr("October") $>","<$ tr("November") $>","<$ tr("December") $>"],startDay:1}'
			});
	--></script>
<%cpp>
		if (LiveSetup().GetShowInfoBox()) {
</%cpp>
	<script type="text/javascript" src="js/live/vdr_status.js"></script>
	<script type="text/javascript"><!--
		var InfoBox = new LiveVdrInfo('ibox.xml', 'infobox');
		window.addEvent('domready', function(){
			InfoBox.request(<%cpp> if (update_status) { reply.sout() << "true"; } else { reply.sout() << "false"; } </%cpp>);
		});
		window.addEvent('unload', function(){
			InfoBox.pageFinished();
		});
	--></script>
<%cpp>
		}
</%cpp>
<%cpp>
	}
</%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def infobox>
<div id="infobox">
	<div class="statuscontent">
		<div class="st_header">
			<div id="infobox_caption" class="caption"><$ tr("retrieving status ...") $></div>
			<div id="infobox_timenow" class="now">--:--</div>
		</div>
		<div class="st_content">
			<div id="infobox_name" class="name"></div>
			<div id="infobox_duration" class="duration">--:--</div>
		</div>
		<div class="st_controls">
			<div class="st_update">
				<a href="javascript:InfoBox.toggleUpdate()" <& tooltip.hint text=(tr("Toggle updates on/off.")) &>><img id="statusReloadBtn" src="<$ LiveSetup().GetThemedLink("img", "stop_update.png") $>" alt="" /></a>
			</div>
			<div id="infobox_recording_buttons" style="display: none">
				<& ajax_action_href action=("stop_recording") id=("infobox_stop") image=("stop.png") tip=(tr("stop playback")) &>
				<& ajax_action_href action=("play_recording") id=("infobox_play") image=("play.png") tip=(tr("resume playback")) &>
				<& ajax_action_href action=("pause_recording") id=("infobox_pause") image=("pause.png") tip=(tr("pause playback")) &>
				<& ajax_action_href action=("rwd_recording") id=("infobox_rwd") image=("rwd.png") tip=(tr("fast rewind")) &>
				<& ajax_action_href action=("ffw_recording") id=("infobox_ffw") image=("ffw.png") tip=(tr("fast forward")) &>
			</div>
			<div id="infobox_channel_buttons">
				<& ajax_action_href action=("switch_channel") id=("infobox_prevchan") image=("one_downarrow.png") tip=(tr("previous channel")) &>
				<& ajax_action_href action=("switch_channel") id=("infobox_nextchan") image=("one_uparrow.png") tip=(tr("next channel")) &>
			</div>
			<div class="st_pbar">
				<& progressbar id=("infobox_elapsed") &>
			</div>
		</div>
	</div>
	<div style="display: none;">
		<span id="__infobox_request_err"><$ tr("No server response!") $></span>
		<span id="__infobox_update_err"><$ tr("Failed to update infobox!") $></span>
	</div>
</div>
</%def>

<# ---------------------------------------------------------------------- #>

<%def epg_tool_box>
<%args>
	int detail;
	std::string epgid;
	std::string title;
	time_t startTime;
	time_t endTime;
	int lastCurrentChanel = int();
        std::string s_IMDB_ID;
</%args>
<%cpp>
	int duration = EpgEvents::Duration(startTime, endTime);
	int elapsed = EpgEvents::ElapsedTime(startTime, endTime);
    tEventID eventId = tEventID();
	tChannelID channelId = tChannelID();

	EpgEvents::DecodeDomId(epgid, channelId, eventId);
	if (detail) { // output for vertical toolbox
</%cpp>
	<& pageelems.event_timer epgid=(epgid) &>
	<& pageelems.ajax_action_href action="switch_channel" tip=(tr("Switch to this channel.")) param=(channelId) image="zap.png" alt="" &>
<%cpp>
		if (LiveFeatures<features::epgsearch>().Recent() && eventId != 0) {
</%cpp>
	<a href="searchresults.html?searchplain=<$ StringEscapeAndBreak(title) $>"><img src="<$ LiveSetup().GetThemedLink("img", "search.png") $>" alt="" <& tooltip.hint text=(tr("Search for repeats.")) &>></img></a>
<%cpp>
		}
		if ((duration == 0) || (elapsed >= 0)) {
</%cpp>
	<& pageelems.hls_channel channelId=(channelId) &>
	<& pageelems.m3u_playlist_channel channelId=(channelId) &>
<%cpp>
		}
	if (eventId != 0) {
</%cpp>
		<& pageelems.imdb_info_href title=(title) s_IMDB_ID=(s_IMDB_ID) &>
<%cpp>
		}
	}
	else { // table output
</%cpp>
		<td class="action leftcol <? lastCurrentChanel ? "bottomrow"?>"><& pageelems.event_timer epgid=(epgid) &></td>
		<td class="action <? lastCurrentChanel ? "bottomrow"?>"><& pageelems.ajax_action_href action="switch_channel" tip=(tr("Switch to this channel.")) param=(channelId) image="zap.png" alt="" &></td>
		<td class="action <? lastCurrentChanel ? "bottomrow"?>"><%cpp>if (LiveFeatures<features::epgsearch>().Recent() && eventId != 0) { </%cpp><a href="searchresults.html?searchplain=<$ StringUrlEncode(title) $>"><img src="<$ LiveSetup().GetThemedLink("img", "search.png") $>" alt="" <& tooltip.hint text=(tr("Search for repeats.")) &>></img></a><%cpp> } else { </%cpp><img src="img/transparent.png" width="16" height="16"><%cpp> } </%cpp></td>
		<td class="action <? lastCurrentChanel ? "bottomrow"?>"><%cpp>if ((duration == 0) || (elapsed > 0)) { </%cpp><& pageelems.hls_channel channelId=(channelId) &><%cpp> } </%cpp></td>
		<td class="action <? lastCurrentChanel ? "bottomrow"?>"><%cpp>if ((duration == 0) || (elapsed > 0)) { </%cpp><& pageelems.m3u_playlist_channel channelId=(channelId) &><%cpp> } </%cpp></td>
		<td class="action <? lastCurrentChanel ? "bottomrow"?>">
<%cpp>
			if (eventId != 0) {
</%cpp>
			<& pageelems.imdb_info_href title=(title) &>
<%cpp>
			}
</%cpp>
		</td>
<%cpp>
	}
</%cpp>
</%def>

<# ---------------------------------------------------------------------- #>

<%def epg_tt_box>
<%args>
	std::string boxId;
	std::string caption;
	std::string tools_comp;
	std::string time;
	std::string title;
	std::string short_descr;
	std::string long_descr;
	std::string filename;
	std::string archived;
 	std::string epgImage;
        uintptr_t ievent;
        uintptr_t irecording;
	int elapsed = -1;
</%args>
	<div class="epg_description" id="<$ (boxId) $>">
		<div class="station">
			<div class="boxheader">

<div>
<%cpp>
cScraperMovieOrTv scraperMovieOrTv;
scraperMovieOrTv.found = false;
scraperMovieOrTv.event = static_cast<cEvent *>((void *)ievent);
scraperMovieOrTv.recording = static_cast<cRecording *>((void *)irecording);
scraperMovieOrTv.httpImagePaths = false;
scraperMovieOrTv.media = true;
ScraperCallService("GetScraperMovieOrTv", &scraperMovieOrTv);
const bool episodeFound = scraperMovieOrTv.found && (!scraperMovieOrTv.movie) && scraperMovieOrTv.episodeFound;
if (scraperMovieOrTv.found) {
</%cpp>
<div class = "caption menu">
  <a id="<$ boxId $>_epg_m"     class = "active"   onclick="displayEPG('<$ boxId $>')" ><$ trVDR("EPG") $></a>
| <a id="<$ boxId $>_scraper_m" class = "inactive" onclick="displayScraper('<$ boxId $>')"><$ tr("Scraper") $></a>
| <a id="<$ boxId $>_actors_m"  class = "inactive" onclick="displayActors('<$ boxId $>')" ><$ tr("Actors") $></a>
| <a id="<$ boxId $>_artwork_m" class = "inactive" onclick="displayArtwork('<$ boxId $>')" ><$ tr("Artwork") $></a>
</div>
<%cpp>
} else {
</%cpp>
<div class="caption"><$ (caption) $></div>
<%cpp>
}
</%cpp>
</div>
                        </div>
		</div>
		<div class="epg_content">
			<div class="epg_tools">
				<& (tools_comp) id=(boxId) archived=(archived) detail=(1) title=(title) s_IMDB_ID=(scraperMovieOrTv.IMDB_ID) &>
			</div>
			<div class="epg_info">
				<div class="info nowrap"><%cpp> if (!archived.empty()) { </%cpp><span class="bold"><$ (archived + " ") $></span><%cpp> } </%cpp><$ (time) $></div>
<%cpp>
	if (elapsed >= 0) {
</%cpp>
				<div class="progress"><div><& pageelems.progressbar progress=(elapsed) &></div></div>
<%cpp>
	}
</%cpp>
				<div class="title"><$ (title) $></div>
				<div class="short"><$ (short_descr) $></div>
				<div class="description" id=<$ boxId $>_description>
					<span id = "<$ boxId $>_epg_image" class="epg_images">
<%cpp>
	std::list<std::string> images = EpgEvents::EpgImages(boxId);
	for(std::list<std::string>::iterator it = images.begin(); it != images.end(); ++it ) {
</%cpp>
         <a href="/epgimages/<$ *it $>" target="_blank">
						<img src="/epgimages/<$ *it $>" class="epg_image"/>
         </a>
<%cpp>
	}
        if(!epgImage.empty() ) {
</%cpp>
         <a href="/tvscraper/<$ epgImage $>" target="_blank">
	   <img src="/tvscraper/<$ epgImage $>" class="epg_image"/>
         </a>
<%cpp>
          if (episodeFound && !scraperMovieOrTv.episode.episodeImage.path.empty() ) {
</%cpp>
           <a href="/tvscraper/<$ ScraperImagePath2Live(scraperMovieOrTv.episode.episodeImage.path) $>" target="_blank">
             <img src="/tvscraper/<$ ScraperImagePath2Live(scraperMovieOrTv.episode.episodeImage.path) $>" class="epg_image"/>
           </a>
<%cpp>
          }
	} else {

	std::list<std::string> images1 = EpgEvents::RecImages(boxId, filename);
	size_t delimPos = boxId.find_last_of('_');
	std::string recId = (delimPos)?boxId.substr(delimPos+1):boxId;

	for(std::list<std::string>::iterator it = images1.begin(); it != images1.end(); ++it ) {
</%cpp>
         <a href="/recimages/<$ recId $>/<$ *it $>" target="_blank">
						<img src="/recimages/<$ recId $>/<$ *it $>" class="epg_image"/>
         </a>
<%cpp>
	}}
</%cpp>
					</span>
<# -----------------  scraper data -----------------  #>
<div id = '<$ boxId $>_scraper' hidden>
<%cpp>
if (scraperMovieOrTv.found) {
</%cpp>
<#
  <div class="short">Content:        <$ (scraperMovieOrTv.movie?"Movie":"TV show" ) $></div>
#>
  <div class="short"><$ tr("Title:") $>         <$ (scraperMovieOrTv.title ) $></div>
<%cpp>
  if (!scraperMovieOrTv.originalTitle.empty() ) {
</%cpp>
  <div class="short"><$ tr("Original title:") $> <$ (scraperMovieOrTv.originalTitle ) $></div>
<%cpp>
  }
  if (episodeFound) {
</%cpp>
    <div class="short"><$ tr("Episode:") $> S<$ std::to_string(scraperMovieOrTv.episode.season ) $>E<$ (scraperMovieOrTv.episode.number ) $><$scraperMovieOrTv.episode.absoluteNumber?"A" + std::to_string(scraperMovieOrTv.episode.absoluteNumber):""$> <$ (scraperMovieOrTv.episode.name ) $></div>
    <div class="short"><$ tr("Episode overview:") $>   <$ (scraperMovieOrTv.episode.overview ) $></div>
<%cpp>
    if (scraperMovieOrTv.episode.vote_average != 0 ) {
</%cpp>
      <div class="short"><$ tr("Episode vote average/count:") $> <$ (scraperMovieOrTv.episode.vote_average ) $> / <$ (scraperMovieOrTv.episode.vote_count ) $></div>
<%cpp>
    }
</%cpp>
    <div class="short"><$ tr("Episode first aired:") $> <$ (scraperMovieOrTv.episode.firstAired ) $></div>
<%cpp>
    if (!scraperMovieOrTv.episode.guestStars.empty() ) {
</%cpp>
      <div class="short"><$ tr("Episode guest stars:") $><$ toString(scraperMovieOrTv.episode.guestStars) $></div>
<%cpp>
    }
</%cpp>
<#
    <div class="short">episode Image Url:  <$ (scraperMovieOrTv.episode.episodeImageUrl ) $></div>
#>
<%cpp>
    if (!scraperMovieOrTv.episode.director.empty() ) {
</%cpp>
      <div class="short"><$ tr("Episode director:") $>   <$ toString(scraperMovieOrTv.episode.director) $></div>
<%cpp>
    }
    if (!scraperMovieOrTv.episode.writer.empty() ) {
</%cpp>
      <div class="short"><$ tr("Episode writer:") $>     <$ toString(scraperMovieOrTv.episode.writer) $></div>
<%cpp>
    }
    if (!scraperMovieOrTv.episode.IMDB_ID.empty() ) {
</%cpp>
      <a href="https://www.imdb.com/title/<$ (scraperMovieOrTv.episode.IMDB_ID ) $>" target="_blank"> <$ tr("IMDB episode") $> </a>
<%cpp>
    }
  }  // end if episode found
  if (!scraperMovieOrTv.tagline.empty() ) {
</%cpp>
  <div class="short"><$ tr("Tagline:") $>        <$ (scraperMovieOrTv.tagline ) $></div>
<%cpp>
  }
</%cpp>
  <div class="short"><$ tr("Overview:") $>       <$ (scraperMovieOrTv.overview ) $></div>
  <div class="short"><$ tr("Genres:") $>         <$ toString(scraperMovieOrTv.genres ) $></div>
<%cpp>
  if (!scraperMovieOrTv.homepage.empty() ) {
</%cpp>
  <div class="short"><a href ="<$ (scraperMovieOrTv.homepage) $>" target="_blank"><$ tr("Homepage") $></a></div>
<%cpp>
  }
</%cpp>
  <div class="short"><$ tr("Release date:") $>   <$ (scraperMovieOrTv.releaseDate ) $></div>
  <div class="short"><$ tr("Runtimes:") $>       <$ toString(scraperMovieOrTv.runtimes ) $></div>
<%cpp>
  if (scraperMovieOrTv.popularity != 0) {
</%cpp>
  <div class="short"><$ tr("Popularity:") $>     <$ (scraperMovieOrTv.popularity ) $></div>
<%cpp>
  }
  if (scraperMovieOrTv.voteAverage  != 0) {
</%cpp>
  <div class="short"><$ tr("Vote average/count:") $> <$ (scraperMovieOrTv.voteAverage ) $> / <$ (scraperMovieOrTv.voteCount ) $></div>
<%cpp>
  }
</%cpp>
<#
  <div class="short">Production Countries: <$ toString(scraperMovieOrTv.productionCountries) $></div>
#>
<%cpp>
  if (!scraperMovieOrTv.actors.empty() ) {
</%cpp>
  <div class="short"><$ tr("Actors:") $>         <$ toString(scraperMovieOrTv.actors) $></div>
<%cpp>
  }
  if (!scraperMovieOrTv.IMDB_ID.empty() ) {
</%cpp>
    <a href="https://www.imdb.com/title/<$ (scraperMovieOrTv.IMDB_ID ) $>" target="_blank"> <$ tr("IMDB") $> </a>
<%cpp>
  }
</%cpp>
<#
  <div class="short">Poster url:     <$ (scraperMovieOrTv.posterUrl ) $></div>
  <div class="short">Fanart url:     <$ (scraperMovieOrTv.fanartUrl ) $></div>
#>
<%cpp>
  if (scraperMovieOrTv.movie) {
    if (scraperMovieOrTv.budget) {
</%cpp>
    <div class="short"><$ tr("Budget:") $>         <$ (scraperMovieOrTv.budget ) $></div>
<%cpp>
    }
    if (scraperMovieOrTv.revenue) {
</%cpp>
    <div class="short"><$ tr("Revenue:") $>        <$ (scraperMovieOrTv.revenue) $></div>
<%cpp>
    }
</%cpp>
<#
    <div class="short">collectionId:   <$ (scraperMovieOrTv.collectionId) $></div>
#>
<%cpp>
    if (!scraperMovieOrTv.collectionName.empty() ) {
</%cpp>
    <div class="short"><$ tr("Collection name:") $> <$ (scraperMovieOrTv.collectionName) $></div>
<%cpp>
    }
    if (!scraperMovieOrTv.director.empty() ) {
</%cpp>
    <div class="short"><$ tr("Director:") $>       <$ toString(scraperMovieOrTv.director) $></div>
<%cpp>
    }
    if (!scraperMovieOrTv.writer.empty() ) {
</%cpp>
    <div class="short"><$ tr("Writer:") $>         <$ toString(scraperMovieOrTv.writer) $></div>
<%cpp>
    }
  } else {  // TV show
</%cpp>
    <div class="short"><$ tr("Status:") $>         <$ (scraperMovieOrTv.status    ) $></div>
<#
    <div class="short">Networks:       <$ toString(scraperMovieOrTv.networks) $></div>
#>
<%cpp>
    if (!scraperMovieOrTv.createdBy.empty() ) {
</%cpp>
      <div class="short"><$ tr("Created by:") $>     <$ toString(scraperMovieOrTv.createdBy) $></div>
<%cpp>
    }
  }
}
</%cpp>
</div>
<# -----------------  actors -----------------  #>
<div id = '<$ boxId $>_actors' hidden>
<%cpp>
if (scraperMovieOrTv.found) {
</%cpp>
<table>
<%cpp>
  const int num_cols = 4;
  int num = 1;
  std::string actor_names = "";
  for (cActor &actor: scraperMovieOrTv.actors) {
    if (actor.actorThumb.path.empty() ) continue;  // only actors with images
    if (num == 1) {
</%cpp>
      <tr>
<%cpp>
    }
</%cpp>
    <td>
      <a href="/tvscraper/<$ ScraperImagePath2Live(actor.actorThumb.path) $>" target="_blank">
        <img src="/tvscraper/<$ ScraperImagePath2Live(actor.actorThumb.path) $>" alt="<$actor.name$>: <$actor.role$>" class="actor" width="118px">
        </img>
      </a>
    </td>
<%cpp>
    actor_names.append("<td>"); 
    actor_names.append(actor.name); 
    actor_names.append(":<br>"); 
    actor_names.append(actor.role); 
    actor_names.append("</td>"); 
    if (num == num_cols) {
</%cpp>
      </tr>
      <tr><$$actor_names$></tr>
<%cpp>
      num = 0;
      actor_names = "";
    }
    num++;
  } // for actor in actors
  if (episodeFound) for (cActor &actor: scraperMovieOrTv.episode.guestStars) {
    if (actor.actorThumb.path.empty() ) continue;  // only actors with images
    if (num == 1) {
</%cpp>
      <tr>
<%cpp>
    }
</%cpp>
    <td>
      <a href="/tvscraper/<$ ScraperImagePath2Live(actor.actorThumb.path) $>" target="_blank">
        <img src="/tvscraper/<$ ScraperImagePath2Live(actor.actorThumb.path) $>" alt="<$actor.name$>: <$actor.role$>" class="actor" width="118px">
        </img>
      </a>
    </td>
<%cpp>
    actor_names.append("<td>"); 
    actor_names.append(actor.name); 
    actor_names.append(":<br>"); 
    actor_names.append(actor.role); 
    actor_names.append("</td>"); 
    if (num == num_cols) {
</%cpp>
      </tr>
      <tr><$$actor_names$></tr>
<%cpp>
      num = 0;
    }
    num++;
  } // for actor in episode.guestStars
  if (num != 1) {
</%cpp>
    </tr>
    <tr><$$actor_names$></tr>
<%cpp>
  }
</%cpp>
</table>
<%cpp>
}
</%cpp>
</div>
<# -----------------  posters / artwork -----------------  #>
<div id = '<$ boxId $>_artwork' hidden>
<%cpp>
  const uintptr_t media_p = (uintptr_t)&(scraperMovieOrTv.posters);
  const uintptr_t media_b = (uintptr_t)&(scraperMovieOrTv.banners);
  const uintptr_t media_f = (uintptr_t)&(scraperMovieOrTv.fanarts);
</%cpp>
<& media media_p=(media_p) &>
<& media media_p=(media_f) &>
<& media media_p=(media_b) &>
</div>
<# -----------------  epg -----------------  #>
<div id = '<$ boxId $>_epg'>
					<%cpp> reply.out() << StringEscapeAndBreak(long_descr); </%cpp>
				</div>
			</div>
		</div>
	</div>
</div>
</%def>

<# ------------  display std::vector<cTvMedia> #>
<%def media>
<%args>
        uintptr_t media_p;
</%args>
<%cpp>
const std::vector<cTvMedia> *media_v = static_cast<std::vector<cTvMedia> *>((void *)media_p);
for (const cTvMedia &media: *media_v) {
</%cpp>
  <a href="/tvscraper/<$ ScraperImagePath2Live(media.path) $>" target="_blank">
    <img src="/tvscraper/<$ ScraperImagePath2Live(media.path) $>" class="artwork" width="480px">
    </img>
  </a>
<%cpp>
}
</%cpp>
</%def>
<# ---------------------------------------------------------------------- #>

<%def about_tt_box>
	<div class="epg_description" id="aboutBox">
		<div class="station">
			<div class="boxheader"><div><div class="caption"><$ tr(LIVESUMMARY) $></div></div></div>
		</div>
		<div class="epg_content">
			<div>
				<div class="about_head"><div><div><$ tr("Authors") $></div></div></div>
				<div class="about_left"><$ tr("Project Idea") $>:</div>
				<div class="about_right">Thomas Keil (Thomas)</div>
				<div class="about_left"><$ tr("Webserver") $>:</div>
				<div class="about_right">Sascha Volkenandt (LordJaxom)</div>
				<div class="about_left"><$ tr("Current Maintainer") $>:</div>
				<div class="about_right">Markus Ehrnsperger (MarkusE @ <a href="https://www.vdr-portal.de">VDR Portal</a>)</div>
				<div class="about_left"><$ tr("Previous Maintainer") $>:</div>
				<div class="about_right">Jasmin Jessich (jasminj)</div>
				<div class="about_left"><$ tr("Project leader") $>:</div>
				<div class="about_right">Dieter Hametner (tadi)</div>
				<div class="about_left"><$ tr("Content") $>:</div>
				<div class="about_right">Christian Wieninger (winni)</div>
				<div class="about_left"><$ tr("Graphics") $>:</div>
				<div class="about_right">Michael Br&uuml;ckner (skiller2k1)</div>
				<div class="about_head"><div><div><$ tr("Information") $></div></div></div>
				<div class="about_left"><$ tr("LIVE version") $>:</div>
				<div class="about_right"><$ LIVEVERSION $><$ VERSION_SUFFIX $></div>
				<div class="about_left"><$ tr("VDR version") $>:</div>
				<div class="about_right"><$ VDRVERSION $></div>
				<div class="about_head"><div><div><$ tr("Features") $></div></div></div>
				<div class="about_left">EPGsearch:</div>
				<div class="about_right">
<%cpp>
					Features< features::epgsearch >& epgsearch = LiveFeatures< features::epgsearch >();
</%cpp>
					<img align="center" src="<$ LiveSetup().GetThemedLink("img", epgsearch.Recent() ? "active.png" : "inactive.png") $>"/>
<%cpp>
					if ( epgsearch.Recent() ) {
</%cpp>
						<$ tr("active") $>: <$ epgsearch.Version() $>
<%cpp>
					} else {
</%cpp>
						<$ tr("required") $>: <$ epgsearch.MinVersion() $>
<%cpp>
					}
</%cpp>
					(<a href="https://github.com/vdr-projects/vdr-plugin-epgsearch" target="_blank"><$ tr("Homepage") $></a>)<br/>
				</div>
				<div class="about_left">Streamdev server:</div>
				<div class="about_right">
<%cpp>
					Features< features::streamdev_server >& streamdev = LiveFeatures< features::streamdev_server >();
</%cpp>
					<img align="center" src="<$ LiveSetup().GetThemedLink("img", streamdev.Loaded() ? "active.png" : "inactive.png") $>"/>
<%cpp>
					if ( streamdev.Loaded() ) {
</%cpp>
						<$ tr("active") $>: <$ streamdev.Version() $>
<%cpp>
					} else {
</%cpp>
						<$ tr("required") $>: <$ streamdev.MinVersion() $>
<%cpp>
					}
</%cpp>
					(<a href="https://github.com/vdr-projects/vdr-plugin-streamdev" target="_blank"><$ tr("Homepage") $></a>)<br/>
				</div>
				<div class="about_head"><div><div><$ tr("Information providers") $></div></div></div>
				<div class="about_line">Movie information provided by <a target="_blank" href="https://www.themoviedb.org/">TMDB</a></div>
				<div class="about_line">Information provided by TheTVDB.com. Please consider <a target="_blank" href="https://u10505776.ct.sendgrid.net/ls/click?upn=xMYYCP13hVd-2BZPpbVcMPHeLXfv-2BPRdIsKm2qSeirIHi7kH9am8IxD-2BavFbeqGqIXIcjH_INgc0CXRkIvGU-2BJ1W6HLAynNbR0UBoMb2tkpDdezO3QRj-2FQPQAMrtJKVcB0N7eSvbYpjQTDNOQBf2pb94uDgGr0-2BXyXFk7Oyfva30BASYCRLvtRQyi5eOCAbH8fon7UETlPydobeLA3Recu9OsXol8c7Ng4pDAsH6KsFF8CH7HQoVxivnpKrQW2v4ek7U-2BYlWmH31o9Koke3vq-2FDsQ0P-2BiKLECU3LgttsntUcN8fnUs-3D">supporting them</a></div>
				<div class="about_head"><div><div><$ tr("Bugs and suggestions") $></div></div></div>
				<div class="about_line"><$ tr("If you encounter any bugs or would like to suggest new features, please use our bugtracker") $>:<br/>
					<a target="_blank" href="https://github.com/MarkusEh/vdr-plugin-live/issues">https://github.com/MarkusEh/vdr-plugin-live/issues</a></div>
				<div class="about_head"><div><div>&nbsp;</div></div></div>
			</div>
		</div>
	</div>
</%def>
