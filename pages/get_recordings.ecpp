<%pre>

#include <exception.h>
#include <tools.h>
#include <recman.h>

using namespace vdrlive;

</%pre>
<%args>
  int r[];
  time_t vdr_start = 0;
  time_t recordings_tree_creation = 0;
</%args>
<%cpp>
  reply.setContentType("text/javascript");
  bool error = false;
  if (vdr_start != 0 && vdr_start != LiveSetup().GetVdrStart()) {
    esyslog("live ERROR, get_recordings.ecpp, vdr restarted");
    error = true;
  }
  </%cpp>
vdr_restart = <$ error?"true":"false"$>;
  <%cpp>
  if (!error) {
    bool recordings_tree_re_created = false;
    RecordingsTreePtr recordingsTree(LiveRecordingsManager()->GetRecordingsTree());
    if (recordings_tree_creation != 0 && recordings_tree_creation != recordingsTree->getCreationTimestamp()) {
      isyslog("live INFO, get_recordings.ecpp, recordings tree re-created");
      recordings_tree_re_created = true;
    }
    </%cpp>
recordings_tree_re_created = <$ recordings_tree_re_created?"true":"false"$>;
    <%cpp>
  /*
    esyslog("live, get_recordings.ecpp, qparam as url = %s", qparam.getUrl().c_str() );
    if(qparam.paramcount())
      esyslog("live, get_recordings.ecpp, qparam[0] = %s", qparam[0].c_str() );

    esyslog("live, get_recordings.ecpp, r size = %d", (int)r.size());
    if (r.size() > 0)
      esyslog("live, get_recordings.ecpp, r[0] = %d", r[0]);

  */

    cLargeString recoring_item("recoring_item_get_recordings.ecpp", 5000);
    for (int recording: r) {
      bool found = false;
      for (const RecordingsItemRecPtr &rPtr: *recordingsTree->allRecordings()) if (recording == rPtr->IdI() ) {
        recoring_item.clear();
        rPtr->AppendAsJSArray(recoring_item);
        </%cpp>
recs[<$cSv(cToSvInt(rPtr->IdI()))$>]=[<$$ recoring_item.c_str() $>]
        <%cpp>
        found = true;
        break;
      }
      if (!found) esyslog("live ERROR, get_recordings.ecpp, recording %i not found", recording);
    }
  }
</%cpp>
