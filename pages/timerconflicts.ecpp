<%pre>

#include <timerconflict.h>
#include <tools.h>
#include <setup.h>
#include <epg_events.h>
#include <timers.h>

using namespace vdrlive;

</%pre>
<%args>
  // input parameters
</%args>
<%session scope="global">
bool logged_in(false);
</%session>
<%include>page_init.eh</%include>
<%cpp>
reply.setHeader (tnt::httpheader::cacheControl, "no-store, no-cache, max-age=0, must-revalidate, proxy-revalidate", true);
if (!logged_in && LiveSetup().UseAuth()) {
  cToSvConcat<0> targetUrl = "/login.html?redirect=";
  targetUrl.appendUrlEscaped(request.getQuery());
  return reply.redirect(targetUrl.data());
}
</%cpp>
<%cpp>
  pageTitle = tr("Timer conflicts");
  TimerConflicts timerConflicts;
  cMutexLock timersLock( &LiveTimerManager() );
  SortedTimers& timers = LiveTimerManager().GetTimers();
</%cpp>
<& pageelems.doc_type &>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>VDR-Live - <$ pageTitle $></title>
    <& pageelems.stylesheets &>
    <& pageelems.ajax_js &>
    <& pageelems.create_html_js &>
  </head>
  <body onload="adjustHeader()" onresize="adjustHeader()">
    <& pageelems.logo &>
    <& menu active=("timersconflicts")>
    <div class="inhalt">
%      if (timerConflicts.size() == 0) {
        <$ tr("No timer conflicts") $>
%      } else {
      <table class="listing" cellspacing="0" cellpadding="0">
<%cpp>
        for (TimerConflicts::iterator conflict = timerConflicts.begin(); conflict != timerConflicts.end(); ++conflict) {
          const std::list< TimerInConflict >& conflTimers = conflict->ConflictingTimers();
          for (std::list< TimerInConflict >::const_iterator confltimer = conflTimers.begin(); confltimer != conflTimers.end(); ++confltimer) {
</%cpp>
            <tr class="head">
              <td colspan="12">
                <div class="boxheader"><div><div><$ concat(cToSvDateTime(tr("%A, %x"), conflict->ConflictTime()), " ", cToSvDateTime(tr("%I:%M %p"), conflict->ConflictTime()), " - ", cToSvInt(confltimer->percentage), "%") $><span style="float:right;"><diff><$ tr("Server")$>: <$ (confltimer->remote == "" ) ? tr("local") : confltimer->remote $> </diff></span></div></div></div>
              </td>
            </tr>
            <tr class="description">
              <td class="leftcol"><img src="img/transparent.png" alt="" width="16px" height="16px" /></td>
              <td><div class="withmargin"><$ trVDR("Channel") $></div></td>
              <td class="td-hidden-xs"><div class="withmargin hidden-xs"><$ trVDR("Start") $></div></td>
              <td class="td-hidden-xs"><div class="withmargin hidden-xs"><$ trVDR("Stop")  $></div></td>
              <td class="td-hidden-xs"><div class="withmargin hidden-xs"><$ trVDR("Duration")  $></div></td>
              <td class="td-hidden-xs"><div class="withmargin hidden-xs"><$ trVDR("Priority") $></div></td>
              <td><div class="withmargin"><$ trVDR("File") $></div></td>
              <td><div class="withmargin"><$ tr("Search timer") $></div></td>
                <td class="td-hidden-xs"><img class="hidden-xs action-rightcol" src="img/transparent.png" alt="" width="16px" height="16px" /></td>
              <td class="td-hidden-xs"><img class="hidden-xs action-rightcol" src="img/transparent.png" alt="" width="16px" height="16px" /></td>
              <td class="td-hidden-xs"><img class="hidden-xs action-rightcol" src="img/transparent.png" alt="" width="16px" height="16px" /></td>
              <td class="rightcol"><img class="action-rightcol" src="img/transparent.png" alt="" width="16px" height="16px" /></td>
            </tr>
<%cpp>
            for (std::list<int>::const_iterator timerIndex = confltimer->concurrentTimerIndices.begin(); timerIndex != confltimer->concurrentTimerIndices.end(); ++timerIndex) {
              LOCK_TIMERS_READ;
              cTimer* timer = (cTimer *)Timers->GetById(*timerIndex, (confltimer->remote == "") ? NULL : confltimer->remote.c_str());
              if (!timer) continue;

              std::list< int >::const_iterator nexttimerIndex = timerIndex;
              ++nexttimerIndex;
              bool bottom = (nexttimerIndex == confltimer->concurrentTimerIndices.end());

              std::string timerStateImg = "transparent.png";
              std::string timerStateHint;
              if (timer->Id() == confltimer->timerIndex) {
                timerStateImg = "timerconflict.gif";
                timerStateHint = tr("Timer has a conflict.");
              }
              else if (timer->Flags() & tfActive) {
                timerStateImg = "arrow.png";
                timerStateHint = tr("Timer is active.");
              }

              EpgInfoPtr epgEvent;
              cToSvConcat longDescription;
              cToSvConcat searchTimName;
              std::string searchTimId;
              std::string recID;
              std::string recName;
              std::string title;

              AppendHtmlEscapedAndCorrectNonUTF8(longDescription, SortedTimers::GetTimerInfo(*timer));

              if (!timer->Event()) {
                LOCK_SCHEDULES_READ;
                timer->SetEventFromSchedule(Schedules);
              }
              if (timer->Event()) {
                epgEvent = EpgEvents::CreateEpgInfo(timer->Channel(), timer->Event());
                bool truncated = false;
                if (!epgEvent->LongDescr().empty()) {
                  longDescription << "<hr>";
                  AppendHtmlEscapedAndCorrectNonUTF8(longDescription, StringWordTruncate(epgEvent->LongDescr(), LiveSetup().GetMaxTooltipChars(), truncated));
                  if (truncated) longDescription << " ...";
                }
                title = epgEvent->Title();
              }
              AppendHtmlEscapedAndCorrectNonUTF8(searchTimName, SortedTimers::SearchTimerInfo(*timer, "searchtimer") );
              searchTimId = SortedTimers::SearchTimerInfo(*timer, "s-id");
              if (searchTimName.empty() && searchTimId.empty() ) AppendHtmlEscapedAndCorrectNonUTF8(searchTimName, SortedTimers::TvScraperTimerInfo(*timer, recID, recName) );
              cToSvConcat timerFile;
              AppendHtmlEscapedAndCorrectNonUTF8(timerFile, timer->File());
</%cpp>
              <tr class="<$ timer->Recording() ? "recording" : ((timer->Flags() & tfActive) ? "active" : "inactive") $>">
                <td class="leftcol <? bottom ? "bottomrow" ?>"><img src="<$ LiveSetup().GetThemedLink("img", timerStateImg) $>" alt="" <%cpp> if (!timerStateHint.empty()) { </%cpp><& tooltip.hint text=(timerStateHint) &><%cpp> } </%cpp>/ ></td>
                <td class="<? bottom ? "bottomrow" ?>"><div class="withmargin">
                   <table class="noborder"><tr><td class="noborder"><span class="display-xs nowrap" > <$ cToSvDateTime(tr("%I:%M %p"), timer->StartTime()) $> - <$ cToSvDateTime(tr("%I:%M %p"), timer->StopTime()) $></span></td></tr>
                   <tr><td class="noborder"><a href="schedule.html?channel=<$ timer->Channel()->Number()$>" title="<$tr("Transponder")$>: <$*cSource::ToString(timer->Channel()->Source() )$>-<$cToSvConcat(timer->Channel()->Frequency())$>-<$timer->Channel()->Parameters()$>"><$ timer->Channel()->Name() $></a></td></tr>
                   <tr><td class="noborder" style="padding-top:2pt"><span class="display-xs" title ="<$ trVDR("Priority") $>"><$ timer->Priority() $> </span></td></tr>
                   </table>
                </div></td>
                <td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><div class="hidden-xs withmargin nowrap" title="<$ trVDR("Start")$>"><$ cToSvDateTime(tr("%I:%M %p"), timer->StartTime()) $>  </div></td>
                <td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><div class="hidden-xs withmargin nowrap" title="<$ trVDR("Stop")$>"><$ cToSvDateTime(tr("%I:%M %p"), timer->StopTime()) $>  </div></td>
                <td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><div class="hidden-xs withmargin nowrap" title="<$ trVDR("Duration")$>"><$ FormatDuration(tr("%d:%02d"), timer->StopTime() - timer->StartTime()) $></div></td>
                <td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><div class="hidden-xs withmargin" title="<$ trVDR("Priority") $>"><$ timer->Priority() $></div></td>
                <td class="<? bottom ? "bottomrow" ?>"><div class="withmargin">
%               if(epgEvent) {
                  <a <& tooltip.display domId=(epgEvent->Id()) &>
                  class="apopup" title="<$$longDescription$>"
                ><$$ cToSvReplace(timerFile, "~", "~<wbr>") $></a>
%               } else {
                 <$$ cToSvReplace(timerFile, "~", "~<wbr>") $>
%               }
                </div></td>

                <td class="<? bottom ? "bottomrow" ?>"><div class="withmargin">
%                if ( !timer->Local() || searchTimId.empty() ) {
<# not created by epgsearch, check tvscraper autotimer #>
                  <$$ cToSvReplace(searchTimName, "~", "~<wbr>") $>
%                 if (!recID.empty() ) {
                    <a href="epginfo.html?epgid=<$ recID $>"> <$$ cToSvReplace(recName, "~", "~<wbr>") $></a>
%                 }
%                } else {
                  <a href="edit_searchtimer.html?searchtimerid=<$ searchTimId $>"><$$ cToSvReplace(searchTimName, "~", "~<wbr>") $></a>
%                }
                </div></td>
                <td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><a class="hidden-xs action-rightcol" href="searchresults.html?searchplain=<$$ cToSvUrlEscaped(title) $>"><img src="<$ LiveSetup().GetThemedLink("img", "search.png") $>" alt="" <& tooltip.hint text=(tr("Search for repeats.")) &> /></a></td>
                <td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><a class="hidden-xs action-rightcol" href="timers.html?timerid=<$ SortedTimers::EncodeDomId(timers.GetTimerId(*timer)) $>&action=toggle"><img src="<$ LiveSetup().GetThemedLink("img", (timer->Flags() & tfActive) ? "active.png" : "inactive.png") $>" alt="" <& tooltip.hint text=(tr("Toggle timer active/inactive")) &> /></a></td>
                <td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><div class="hidden-xs action-rightcol"><& pageelems.edit_timer timerId=(timers.GetTimerId(*timer)) &></div></td>
            <td class="rightcol <? bottom ? "bottomrow" ?>">
<a class="display-xs action-rightcol" href="searchresults.html?searchplain=<$$ cToSvUrlEscaped(title) $>"><img src="<$ LiveSetup().GetThemedLink("img", "search.png") $>" alt="" <& tooltip.hint text=(tr("Search for repeats.")) &> /></a>
<a class="display-xs action-rightcol" href="timers.html?timerid=<$ SortedTimers::EncodeDomId(timers.GetTimerId(*timer)) $>&action=toggle"><img src="<$ LiveSetup().GetThemedLink("img", (timer->Flags() & tfActive) ? "active.png" : "inactive.png") $>" alt="" <& tooltip.hint text=(tr("Toggle timer active/inactive")) &> /></a>
<div class="display-xs action-rightcol"><& pageelems.edit_timer timerId=(timers.GetTimerId(*timer)) &></div>
<a class="action-rightcol" href="timers.html?timerid=<$ SortedTimers::EncodeDomId(timers.GetTimerId(*timer)) $>&action=delete"><img src="<$ LiveSetup().GetThemedLink("img", "del.png") $>" alt="" <& tooltip.hint text=(tr("Delete timer")) &> /></a></td>
              </tr>
%            }
</%cpp>
            <tr class="spacer">
              <td colspan="10"/>
            </tr>
<%cpp>
          }
        }
</%cpp>
      </table>
%      }
    </div>
  </body>
</html>
<%include>page_exit.eh</%include>


