<%pre>

#include <timerconflict.h>
#include <tools.h>
#include <setup.h>
#include <epg_events.h>
#include <timers.h>

using namespace vdrlive;

</%pre>
<%args>
	// input parameters
</%args>
<%session scope="global">
bool logged_in(false);
</%session>
<%include>page_init.eh</%include>
<%cpp>
reply.setHeader (tnt::httpheader::cacheControl, "no-store, no-cache, max-age=0, must-revalidate, proxy-revalidate", true);
if (!logged_in && LiveSetup().UseAuth()) return reply.redirect("login.html");
</%cpp>
<%cpp>
	pageTitle = tr("Timer conflicts");
	TimerConflicts timerConflicts;
	cMutexLock timersLock( &LiveTimerManager() );
	SortedTimers& timers = LiveTimerManager().GetTimers();
</%cpp>
<& pageelems.doc_type &>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>VDR-Live - <$ pageTitle $></title>
		<& pageelems.stylesheets &>
		<& pageelems.ajax_js &>
    <& pageelems.create_html_js &>
	</head>
	<body onload="adjustHeader()" onresize="adjustHeader()">
		<& pageelems.logo &>
		<& menu active=("timersconflicts")>
		<div class="inhalt">
%			if (timerConflicts.size() == 0) {
				<$ tr("No timer conflicts") $>
%			} else {
			<table class="listing" cellspacing="0" cellpadding="0">
<%cpp>
				for (TimerConflicts::iterator conflict = timerConflicts.begin(); conflict != timerConflicts.end(); ++conflict) {
					const std::list< TimerInConflict >& conflTimers = conflict->ConflictingTimers();
					for (std::list< TimerInConflict >::const_iterator confltimer = conflTimers.begin(); confltimer != conflTimers.end(); ++confltimer) {
</%cpp>
						<tr class="head">
							<td colspan="12">
								<div class="boxheader"><div><div><$ concat(FormatDateTime(tr("%A, %x"), conflict->ConflictTime()), " ", FormatDateTime(tr("%I:%M %p"), conflict->ConflictTime()), " - ", cToSvInt(confltimer->percentage), "%") $><span style="float:right;"><diff><$ tr("Server")$>: <$ (confltimer->remote == "" ) ? tr("local") : confltimer->remote $> </diff></span></div></div></div>
							</td>
						</tr>
						<tr class="description">
							<td class="leftcol"><img src="img/transparent.png" alt="" width="16px" height="16px" /></td>
							<td><div class="withmargin"><$ trVDR("Channel") $></div></td>
							<td class="td-hidden-xs"><div class="withmargin hidden-xs"><$ trVDR("Start") $></div></td>
							<td class="td-hidden-xs"><div class="withmargin hidden-xs"><$ trVDR("Stop")  $></div></td>
							<td class="td-hidden-xs"><div class="withmargin hidden-xs"><$ trVDR("Duration")  $></div></td>
							<td class="td-hidden-xs"><div class="withmargin hidden-xs"><$ trVDR("Priority") $></div></td>
							<td><div class="withmargin"><$ trVDR("File") $></div></td>
							<td><div class="withmargin"><$ tr("Searchtimer") $></div></td>
	   	 	      <td class="td-hidden-xs"><img class="hidden-xs action-rightcol" src="img/transparent.png" alt="" width="16px" height="16px" /></td>
						  <td class="td-hidden-xs"><img class="hidden-xs action-rightcol" src="img/transparent.png" alt="" width="16px" height="16px" /></td>
						  <td class="td-hidden-xs"><img class="hidden-xs action-rightcol" src="img/transparent.png" alt="" width="16px" height="16px" /></td>
							<td class="rightcol"><img class="action-rightcol" src="img/transparent.png" alt="" width="16px" height="16px" /></td>
						</tr>
<%cpp>
						for (std::list<int>::const_iterator timerIndex = confltimer->concurrentTimerIndices.begin(); timerIndex != confltimer->concurrentTimerIndices.end(); ++timerIndex) {
#if VDRVERSNUM >= 20301
							LOCK_TIMERS_READ;
							cTimer* timer = (cTimer *)Timers->GetById(*timerIndex, (confltimer->remote == "") ? NULL : confltimer->remote.c_str());
#else
							cTimer* timer = Timers.Get(*timerIndex-1);
#endif
							if (!timer) continue;

							std::list< int >::const_iterator nexttimerIndex = timerIndex;
							++nexttimerIndex;
							bool bottom = (nexttimerIndex == confltimer->concurrentTimerIndices.end());

							std::string timerStateImg = "transparent.png";
							std::string timerStateHint;
							if (timer->Id() == confltimer->timerIndex) {
								timerStateImg = "timerconflict.gif";
								timerStateHint = tr("Timer has a conflict.");
							}
							else if (timer->Flags() & tfActive) {
								timerStateImg = "arrow.png";
								timerStateHint = tr("Timer is active.");
							}

							EpgInfoPtr epgEvent;
							std::string longDescription;
							std::string searchTimName;
							std::string searchTimId;
              std::string recID;
              std::string recName;
							std::string title;
#if VDRVERSNUM >= 20301
							if (!timer->Event()) {
								LOCK_SCHEDULES_READ;
								timer->SetEventFromSchedule(Schedules);
							}
#else
							if (!timer->Event()) timer->SetEventFromSchedule();
#endif
							if (timer->Event()) {
								epgEvent = EpgEvents::CreateEpgInfo(timer->Channel(), timer->Event());
								longDescription = concat(
                    StringEscapeAndBreak(SortedTimers::GetTimerInfo(*timer)),
                    "<hr>",
										StringEscapeAndBreak(StringWordTruncate(epgEvent->LongDescr(), LiveSetup().GetMaxTooltipChars())),
										"<br/><br/>",
                    tr("Click to view details."));
                AppendHtmlEscapedAndCorrectNonUTF8(searchTimName, SortedTimers::SearchTimerInfo(*timer, "searchtimer") );
								searchTimId = SortedTimers::SearchTimerInfo(*timer, "s-id");
								if (searchTimName.empty() && searchTimId.empty() ) AppendHtmlEscapedAndCorrectNonUTF8(searchTimName, SortedTimers::TvScraperTimerInfo(*timer, recID, recName) );
								title = epgEvent->Title();
							}
              std::string timerFile;
              AppendHtmlEscapedAndCorrectNonUTF8(timerFile, timer->File());
</%cpp>
							<tr>
								<td class="leftcol <? bottom ? "bottomrow" ?>"><img src="<$ LiveSetup().GetThemedLink("img", timerStateImg) $>" alt="" <%cpp> if (!timerStateHint.empty()) { </%cpp><& tooltip.hint text=(timerStateHint) &><%cpp> } </%cpp>/ ></td>
								<td class="<? bottom ? "bottomrow" ?>"><div class="withmargin">
                   <table class="noborder"><tr><td class="noborder"><span class="display-xs nowrap" > <$ FormatDateTime(tr("%I:%M %p"), timer->StartTime()) $> - <$ FormatDateTime(tr("%I:%M %p"), timer->StopTime()) $></span></td></tr>
                   <tr><td class="noborder"><a href="schedule.html?channel=<$ timer->Channel()->Number()$>"><$ timer->Channel()->Name() $></a></td></tr>
                   <tr><td class="noborder" style="padding-top:2pt"><span class="display-xs" title ="<$ trVDR("Priority") $>"><$ timer->Priority() $> </span></td></tr></table>
                </div></td>
								<td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><div class="hidden-xs withmargin nowrap" title="<$ trVDR("Start")$>"><$ FormatDateTime(tr("%I:%M %p"), timer->StartTime()) $>  </div></td>
								<td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><div class="hidden-xs withmargin nowrap" title="<$ trVDR("Stop")$>"><$ FormatDateTime(tr("%I:%M %p"), timer->StopTime()) $>  </div></td>
								<td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><div class="hidden-xs withmargin nowrap" title="<$ trVDR("Duration")$>"><$ FormatDuration(tr("%d:%02d"), timer->StopTime() - timer->StartTime()) $></div></td>
								<td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><div class="hidden-xs withmargin" title="<$ trVDR("Priority") $>"><$ timer->Priority() $></div></td>
								<td class="<? bottom ? "bottomrow" ?>"><div class="withmargin"><a
%               if(epgEvent) {
			      			<& tooltip.display domId=(epgEvent->Id()) &>
%               }
						      class="apopup" title="<$$longDescription$>"
								><$$ StringReplace(timerFile, "~", "~<wbr>") $></a></div></td>

								<td class="<? bottom ? "bottomrow" ?>"><div class="withmargin">
%								if ( !timer->Local() || searchTimId.empty() ) {
<# not created by epgsearch, check tvscraper autotimer #>
								  <$$ StringReplace(searchTimName, "~", "~<wbr>") $>
%                 if (!recID.empty() ) {
                    <a href="epginfo.html?epgid=<$ recID $>"> <$$ StringReplace(recName, "~", "~<wbr>") $></a>
%                 }
%								} else {
								  <a href="edit_searchtimer.html?searchtimerid=<$ searchTimId $>"><$$ StringReplace(searchTimName, "~", "~<wbr>") $></a>
%								}
                </div></td>
								<td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><a class="hidden-xs action-rightcol" href="searchresults.html?searchplain=<$ StringEscapeAndBreak(title) $>"><img src="<$ LiveSetup().GetThemedLink("img", "search.png") $>" alt="" <& tooltip.hint text=(tr("Search for repeats.")) &> /></a></td>
								<td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><a class="hidden-xs action-rightcol" href="timers.html?timerid=<$ SortedTimers::EncodeDomId(timers.GetTimerId(*timer)) $>&action=toggle"><img src="<$ LiveSetup().GetThemedLink("img", (timer->Flags() & tfActive) ? "active.png" : "inactive.png") $>" alt="" <& tooltip.hint text=(tr("Toggle timer active/inactive")) &> /></a></td>
								<td class="<? bottom ? "bottomrow" ?> td-hidden-xs"><div class="hidden-xs action-rightcol"><& pageelems.edit_timer timerId=(timers.GetTimerId(*timer)) &></div></td>
				    <td class="rightcol <? bottom ? "bottomrow" ?>">
<a class="display-xs action-rightcol" href="searchresults.html?searchplain=<$ StringEscapeAndBreak(title) $>"><img src="<$ LiveSetup().GetThemedLink("img", "search.png") $>" alt="" <& tooltip.hint text=(tr("Search for repeats.")) &> /></a>
<a class="display-xs action-rightcol" href="timers.html?timerid=<$ SortedTimers::EncodeDomId(timers.GetTimerId(*timer)) $>&action=toggle"><img src="<$ LiveSetup().GetThemedLink("img", (timer->Flags() & tfActive) ? "active.png" : "inactive.png") $>" alt="" <& tooltip.hint text=(tr("Toggle timer active/inactive")) &> /></a>
<div class="display-xs action-rightcol"><& pageelems.edit_timer timerId=(timers.GetTimerId(*timer)) &></div>
<a class="action-rightcol" href="timers.html?timerid=<$ SortedTimers::EncodeDomId(timers.GetTimerId(*timer)) $>&action=delete"><img src="<$ LiveSetup().GetThemedLink("img", "del.png") $>" alt="" <& tooltip.hint text=(tr("Delete timer")) &> /></a></td>
							</tr>
%						}
</%cpp>
						<tr class="spacer">
							<td colspan="10"/>
						</tr>
<%cpp>
					}
				}
</%cpp>
			</table>
%			}
		</div>
	</body>
</html>
<%include>page_exit.eh</%include>


