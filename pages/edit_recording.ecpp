<%pre>

#include <tools.h>
#include <recman.h>
#include <setup.h>
#include <users.h>

#include <vdr/recording.h>

using namespace vdrlive;

</%pre>
<%args>
	// input parameters
	std::string recid;
	std::string async;
  int history_num_back;  //number of pages to go back to the recordings page
      // call with 1 -> chancel will go back one page in history
	// form parameters
	std::string name = "";
	std::string directory = "";
  std::string newdir = "";
  std::string delresume = "";
  std::string delmarks = "";
  std::string copy = "";
  std::string sort;
  std::string filter;
  std::string flat;
</%args>
<%session scope="global">
bool logged_in(false);
std::string active_r;
</%session>
<%request scope="page">
const cRecording* recording;
</%request>
<%include>page_init.eh</%include>
<%cpp>
	if (!logged_in && LiveSetup().UseAuth()) return reply.redirect("login.html");

	if (!cUser::CurrentUserHasRightTo(UR_EDITRECS))
		throw HtmlError( tr("Sorry, no permission. Please contact your administrator!") );

	bool ajaxReq = !async.empty() && (parse_int<int>(async) != 0);

	std::string message;

	recording = NULL;
	if (!recid.empty()) {
		recording = LiveRecordingsManager()->GetByMd5Hash(recid);
		if (!recording)
			throw HtmlError(tr("Couldn't find recording. Maybe you mistyped your request?"));
	}

  bool returnToReferer = false;
	if (request.getMethod() == "POST") {
    ++history_num_back;
		if (name.empty())
			message = tr("Please set a name for the recording!");
		else if (recording) {
			bool copy_only = false;
			if (delresume == "delresume") LiveRecordingsManager()->DeleteResume(recording);
      if (delmarks == "delmarks") LiveRecordingsManager()->DeleteMarks(recording);
      if (copy == "copy") copy_only = true;
      if (newdir != ".") directory = newdir;
			std::string filename =  directory.empty() ? name : StringReplace(directory, "/", "~") + "~" + name;
			if (LiveRecordingsManager()->MoveRecording(recording, FileSystemExchangeChars(filename, true), copy_only))
        returnToReferer = true;
			else
				message = tr("Cannot copy, rename or move the recording.");
		}
  }
  if (returnToReferer) {
</%cpp>
<!DOCTYPE html>
<html>
  <script type="text/javascript" src="js/live/createHtml.js"></script>
  <script>
    back_depending_referrer(2, <$ history_num_back $>);
  </script>
</html>
<%cpp>
	} else {

	if (recording) {
		std::string path = recording->Name();
		size_t found = path.find_last_of("~");

		if (found != std::string::npos) {
			directory = StringReplace(path.substr(0, found), "~", "/");
			name = path.substr(found + 1);
		}
		else {
			directory = "";
			name = path;
		}
	}
</%cpp>
<& pageelems.doc_type &>
<html>
	<head>
<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>VDR Live - <$ tr("Edit recording") $></title>
<%cpp>
	if (!ajaxReq) {
</%cpp>
		<& pageelems.stylesheets &>
    <& pageelems.create_html_js &>
		<& pageelems.ajax_js &>
<%cpp>
	}
</%cpp>
  <script type="text/javascript">
		function new_dir() {
			var dir = document.getElementById("directory");
			dir.style.display = "none";
			document.getElementById("new_dir_button").style.display = "none";
			var newdir = document.getElementById("newdir");
			newdir.value = dir.value;
			newdir.style.display = "";
		}
	</script>
	</head>
	<body onload="adjustHeader()" onresize="adjustHeader()">
<%cpp>
	if (!ajaxReq) {
</%cpp>
		<& pageelems.logo &>
		<& menu active=(active_r) &>
<%cpp>
	}
</%cpp>
		<div class="inhalt">
			<form method="post" name="edit_recording" id="<$ recid $>" action="edit_recording.ecpp">
				<input type="hidden" name="recid" value="<$ recid $>"/>
				<input type="hidden" name="history_num_back" value="<$ history_num_back $>"/>
				<table class="formular" cellpadding="0" cellspacing="0">
					<tr class="head">
						<td class="toprow leftcol rightcol" colspan="2"><div class="boxheader"><div><div class="caption"><$ tr("Edit recording") $></div></div></div></td>
					</tr>
					<tr>
						<td class="label leftcol"><div class="withmargin"><$ tr("Name") $>:</div></td>
						<td class="rightcol"><input type="text" name="name" value="<$ name $>" size="55" class="width99" /></td>
					</tr>
					<tr>
						<td class="label leftcol"><div class="withmargin"><$ tr("Directory") $>:</div></td>
						<td class="rightcol">
							<select name="directory" size="1" id="directory" style="margin-top: 5px">
<%cpp>
        RecordingsTreePtr recordingsTree(LiveRecordingsManager()->GetRecordingsTree());
	for (const auto &dir: recordingsTree->getAllDirs() ) {
</%cpp>
								<option value="<$ dir $>"<$ (dir == directory) ? "selected=\"selected\"" : "" $>><$ dir $></option>
<%cpp>
	}
</%cpp>
							</select>
              <img id="new_dir_button" class="icon" src="<$ LiveSetup().GetThemedLink("img", "button_new.png") $>" title="<$tr("Create new directory")$>" onclick="new_dir()" style="vertical-align: middle">
							<input type="text" name="newdir" id="newdir" value="." size="55" class="width99" style="display:none" />
						</td>
					</tr>
					<tr>
						<td class="label leftcol"><div class="withmargin"><$ tr("Delete resume information") $>:</div></td>
						<td class="rightcol"><input type="checkbox" name="delresume" value="delresume"/></td>
					</tr>
					<tr>
						<td class="label leftcol"><div class="withmargin"><$ tr("Delete marks information") $>:</div></td>
						<td class="rightcol"><input type="checkbox" name="delmarks" value="delmarks"/></td>
					</tr>
					<tr>
						<td class="label leftcol"><div class="withmargin"><$ tr("Copy only") $>:</div></td>
						<td class="rightcol"><input type="checkbox" name="copy" value="copy"/></td>
					</tr>
<%cpp>
if (recording && recording->Info()->ShortText()) {
</%cpp>
					<tr>
						<td class="label leftcol"><div class="withmargin"><$ tr("Short description") $>:</div></td>
						<td class="rightcol"><$ recording->Info()->ShortText() $></td>
					</tr>
<%cpp>
}
if (recording && recording->Info()->Description()) {
</%cpp>
					<tr>
						<td class="label leftcol"><div class="withmargin"><$ tr("Description") $>:</div></td>
						<td class="rightcol"><$ recording->Info()->Description() $></td>
					</tr>
<%cpp>

}
if (recording && recording->Info()->Aux()) {
  std::string aux_data;
  cGetAutoTimerReason getAutoTimerReason;
  getAutoTimerReason.recording_in = recording;
  getAutoTimerReason.requestRecording = false;
  if (getAutoTimerReason.call(LiveSetup().GetPluginScraper()) && getAutoTimerReason.createdByTvscraper) {
    AppendHtmlEscapedAndCorrectNonUTF8(aux_data, getAutoTimerReason.reason);
  } else {
    cSv epgsearchinfo = partInXmlTag(recording->Info()->Aux(), "epgsearch");
    if (!epgsearchinfo.empty()) {
      AppendHtmlEscapedAndCorrectNonUTF8(aux_data, partInXmlTag(epgsearchinfo, "searchtimer") );
    }
  }
  if (!aux_data.empty()) {
</%cpp>
					<tr>
						<td class="label leftcol"><div class="withmargin"><$ tr("Searchtimer") $>:</div></td>
						<td class="rightcol"><$ aux_data $></td>
					</tr>
<%cpp>
  } else {
</%cpp>
					<tr>
						<td class="label leftcol"><div class="withmargin"><$ tr("Auxiliary info") $>:</div></td>
						<td class="rightcol"><$ recording->Info()->Aux() $></td>
					</tr>
<%cpp>
  }
}
</%cpp>
					<tr>
						<td class="buttonpanel leftcol rightcol bottomrow" colspan="2">
							<div class="withmargin">
							<button class="green" type="submit"><$ tr("Save") $></button>
							<button class="red" type="button" onclick="back_depending_referrer(1, <$ history_num_back $>)"><$ tr("Cancel") $></button>
							</div>
						</td>
					</tr>
				</table>
			</form>
			<div style="color: red; margin: 0 auto;">
				<$ message $>
			</div>
		</div>
	</body>
</html>
% }
<%include>page_exit.eh</%include>
