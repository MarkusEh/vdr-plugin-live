<%pre>

#include <setup.h>
#include <tools.h>
#include <users.h>
#include <recman.h>
#include <livefeatures.h>

using namespace vdrlive;

</%pre>
<%args>
  std::string channelid;
  std::string recid;
</%args>
<%session scope="global">
  bool logged_in(false);
</%session>
<%request scope="page">
  cChannel* Channel;
</%request>
<%include>page_init.eh</%include>
<%cpp>
  tChannelID channel = tChannelID::FromString(channelid.c_str());

  if (!logged_in && LiveSetup().UseAuth()) {
    cToSvConcat<0> targetUrl = "/login.html?redirect=";
    targetUrl.appendUrlEscaped(request.getQuery());
    return reply.redirect(targetUrl.data());
  }
  if (!cUser::CurrentUserHasRightTo(UR_STARTREPLAY))
    throw HtmlError( tr("Sorry, no permission. Please contact your administrator!") );

    // the availabilty of Channel signals that we will do live TV streaming.
  Channel = 0;
  if (recid.empty()) {
    LOCK_CHANNELS_READ;
    Channel = (cChannel *)Channels->GetByChannelID(channel);
    if (Channel == 0) {
      throw HtmlError( tr("Couldn't find channel or no channels available. Maybe you mistyped your request?") );
    }
  }
  std::string server = request.getHost();
  server = server.substr(0, server.rfind(':'));
  std::string videourl;
  reply.setContentType("audio/x-mpegurl");
  if (Channel != 0) {
    videourl = concat("#EXTM3U\n#EXTINF:-1,", Channel->Name(), "\nhttp://", server, ":", cToSvInt(LiveSetup().GetStreamdevPort()), "/", LiveSetup().GetStreamdevType(), "/", *Channel->GetChannelID().ToString());
  }
  else {
    const cRecording* recording = LiveRecordingsManager()->GetByMd5Hash(recid);
    cToSvConcat rfid;
    if (LiveFeatures<features::streamdev_server>().Loaded()) {
      if (recording) {
        struct stat st;
        if (stat(recording->FileName(), &st) == 0)
          rfid.appendFormated("%lu:%llu.rec", (unsigned long) st.st_dev, (unsigned long long) st.st_ino);
      }
    }

    if (rfid.empty()) 
      videourl = concat("#EXTM3U\n#EXTINF:-1,", recording?recording->Name():"recording not found", "\nhttp://", server, ":", cToSvInt(LiveSetup().GetServerPort()), "/recstream.html?recid=", recid);
    else
      videourl = concat("#EXTM3U\n#EXTINF:-1,", recording?recording->Name():"recording not found", "\nhttp://", server, ":", cToSvInt(LiveSetup().GetStreamdevPort()), "/", LiveSetup().GetStreamdevType(), "/", rfid, ".ts");
  }
</%cpp>
<& playlist.m3u videourl=(videourl) &>
<%include>page_exit.eh</%include>

<%def m3u>
<%args>
  std::string videourl;
</%args>
<$ videourl $>
</%def>
